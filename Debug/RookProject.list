
RookProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013f8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001590  08001590  00011590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015b8  080015b8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080015b8  080015b8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015b8  080015b8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015b8  080015b8  000115b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080015bc  080015bc  000115bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080015c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000068  08001628  00020068  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08001628  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000d6a  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000049c  00000000  00000000  00020e45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000e8  00000000  00000000  000212e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000009c  00000000  00000000  000213d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000ec72  00000000  00000000  0002146c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000015ba  00000000  00000000  000300de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00053f36  00000000  00000000  00031698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000c7c  00000000  00000000  000855d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  0008624c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000068 	.word	0x20000068
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001578 	.word	0x08001578

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000006c 	.word	0x2000006c
 80001d4:	08001578 	.word	0x08001578

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <gpio_write>:
#include <stm32f4xx.h>

#include "gpio.h"

void gpio_write(GPIO_TypeDef* port, uint8_t pin, uint8_t level)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	460b      	mov	r3, r1
 80001f2:	70fb      	strb	r3, [r7, #3]
 80001f4:	4613      	mov	r3, r2
 80001f6:	70bb      	strb	r3, [r7, #2]
    // check if pointer is not empty
    if (port == NULL) return;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d01a      	beq.n	8000234 <gpio_write+0x4c>
    // pin number can't be over 16
    if (pin >= 16) return;
 80001fe:	78fb      	ldrb	r3, [r7, #3]
 8000200:	2b0f      	cmp	r3, #15
 8000202:	d819      	bhi.n	8000238 <gpio_write+0x50>

    if (level == 0)
 8000204:	78bb      	ldrb	r3, [r7, #2]
 8000206:	2b00      	cmp	r3, #0
 8000208:	d10a      	bne.n	8000220 <gpio_write+0x38>
    {
        port->BSRR |= (0x01 << (16 + pin));
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	699b      	ldr	r3, [r3, #24]
 800020e:	78fa      	ldrb	r2, [r7, #3]
 8000210:	3210      	adds	r2, #16
 8000212:	2101      	movs	r1, #1
 8000214:	fa01 f202 	lsl.w	r2, r1, r2
 8000218:	431a      	orrs	r2, r3
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	619a      	str	r2, [r3, #24]
 800021e:	e00c      	b.n	800023a <gpio_write+0x52>
    }
    else
    {
        port->BSRR |= (0x01 << (pin));
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	699b      	ldr	r3, [r3, #24]
 8000224:	78fa      	ldrb	r2, [r7, #3]
 8000226:	2101      	movs	r1, #1
 8000228:	fa01 f202 	lsl.w	r2, r1, r2
 800022c:	431a      	orrs	r2, r3
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	619a      	str	r2, [r3, #24]
 8000232:	e002      	b.n	800023a <gpio_write+0x52>
    if (port == NULL) return;
 8000234:	bf00      	nop
 8000236:	e000      	b.n	800023a <gpio_write+0x52>
    if (pin >= 16) return;
 8000238:	bf00      	nop
    }
}
 800023a:	370c      	adds	r7, #12
 800023c:	46bd      	mov	sp, r7
 800023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000242:	4770      	bx	lr

08000244 <gpio_toggle>:

void gpio_toggle(GPIO_TypeDef* port, uint8_t pin)
{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
 800024c:	460b      	mov	r3, r1
 800024e:	70fb      	strb	r3, [r7, #3]
	// check if pointer is not empty
	if (port == NULL) return;
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d00c      	beq.n	8000270 <gpio_toggle+0x2c>
	// pin number can't be over 16
	if (pin >= 16) return;
 8000256:	78fb      	ldrb	r3, [r7, #3]
 8000258:	2b0f      	cmp	r3, #15
 800025a:	d80b      	bhi.n	8000274 <gpio_toggle+0x30>

	port->ODR ^= (0x01 << pin);
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	695b      	ldr	r3, [r3, #20]
 8000260:	78fa      	ldrb	r2, [r7, #3]
 8000262:	2101      	movs	r1, #1
 8000264:	fa01 f202 	lsl.w	r2, r1, r2
 8000268:	405a      	eors	r2, r3
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	615a      	str	r2, [r3, #20]
 800026e:	e002      	b.n	8000276 <gpio_toggle+0x32>
	if (port == NULL) return;
 8000270:	bf00      	nop
 8000272:	e000      	b.n	8000276 <gpio_toggle+0x32>
	if (pin >= 16) return;
 8000274:	bf00      	nop
}
 8000276:	370c      	adds	r7, #12
 8000278:	46bd      	mov	sp, r7
 800027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027e:	4770      	bx	lr

08000280 <gpio_configure_pin>:

    return ((port->IDR & (0x01 << pin)) >> pin);
}

void gpio_configure_pin(gpio_opt_t gpio_opt)
{
 8000280:	b480      	push	{r7}
 8000282:	b087      	sub	sp, #28
 8000284:	af00      	add	r7, sp, #0
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint32_t reg;

    // check if pointer is not empty
    if (gpio_opt.Port == NULL) return;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2b00      	cmp	r3, #0
 8000290:	f000 80a1 	beq.w	80003d6 <gpio_configure_pin+0x156>

    // Pin speed
    reg = gpio_opt.Port->OSPEEDR;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	689b      	ldr	r3, [r3, #8]
 8000298:	617b      	str	r3, [r7, #20]
    reg &= ~(0x03 << (gpio_opt.Pin * 2));           // clear bits
 800029a:	7a3b      	ldrb	r3, [r7, #8]
 800029c:	005b      	lsls	r3, r3, #1
 800029e:	2203      	movs	r2, #3
 80002a0:	fa02 f303 	lsl.w	r3, r2, r3
 80002a4:	43db      	mvns	r3, r3
 80002a6:	461a      	mov	r2, r3
 80002a8:	697b      	ldr	r3, [r7, #20]
 80002aa:	4013      	ands	r3, r2
 80002ac:	617b      	str	r3, [r7, #20]
    reg |= (gpio_opt.Speed << (gpio_opt.Pin * 2));  // write bits
 80002ae:	7b3b      	ldrb	r3, [r7, #12]
 80002b0:	461a      	mov	r2, r3
 80002b2:	7a3b      	ldrb	r3, [r7, #8]
 80002b4:	005b      	lsls	r3, r3, #1
 80002b6:	fa02 f303 	lsl.w	r3, r2, r3
 80002ba:	461a      	mov	r2, r3
 80002bc:	697b      	ldr	r3, [r7, #20]
 80002be:	4313      	orrs	r3, r2
 80002c0:	617b      	str	r3, [r7, #20]
    gpio_opt.Port->OSPEEDR = reg;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	697a      	ldr	r2, [r7, #20]
 80002c6:	609a      	str	r2, [r3, #8]

    // output type (open-drain / push-pull)
    reg = gpio_opt.Port->OTYPER;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	685b      	ldr	r3, [r3, #4]
 80002cc:	617b      	str	r3, [r7, #20]
    reg &= ~(0x01 << (gpio_opt.Pin));
 80002ce:	7a3b      	ldrb	r3, [r7, #8]
 80002d0:	461a      	mov	r2, r3
 80002d2:	2301      	movs	r3, #1
 80002d4:	4093      	lsls	r3, r2
 80002d6:	43db      	mvns	r3, r3
 80002d8:	461a      	mov	r2, r3
 80002da:	697b      	ldr	r3, [r7, #20]
 80002dc:	4013      	ands	r3, r2
 80002de:	617b      	str	r3, [r7, #20]
    reg |= (gpio_opt.Type << gpio_opt.Pin);
 80002e0:	7abb      	ldrb	r3, [r7, #10]
 80002e2:	461a      	mov	r2, r3
 80002e4:	7a3b      	ldrb	r3, [r7, #8]
 80002e6:	fa02 f303 	lsl.w	r3, r2, r3
 80002ea:	461a      	mov	r2, r3
 80002ec:	697b      	ldr	r3, [r7, #20]
 80002ee:	4313      	orrs	r3, r2
 80002f0:	617b      	str	r3, [r7, #20]
    gpio_opt.Port->OTYPER = reg;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	697a      	ldr	r2, [r7, #20]
 80002f6:	605a      	str	r2, [r3, #4]

    // Pull up/down
    reg = gpio_opt.Port->PUPDR;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	68db      	ldr	r3, [r3, #12]
 80002fc:	617b      	str	r3, [r7, #20]
    reg &= ~(0x03 << (gpio_opt.Pin * 2));           // clear bits
 80002fe:	7a3b      	ldrb	r3, [r7, #8]
 8000300:	005b      	lsls	r3, r3, #1
 8000302:	2203      	movs	r2, #3
 8000304:	fa02 f303 	lsl.w	r3, r2, r3
 8000308:	43db      	mvns	r3, r3
 800030a:	461a      	mov	r2, r3
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	4013      	ands	r3, r2
 8000310:	617b      	str	r3, [r7, #20]
    reg |= (gpio_opt.Pull << (gpio_opt.Pin * 2));   // write bits
 8000312:	7afb      	ldrb	r3, [r7, #11]
 8000314:	461a      	mov	r2, r3
 8000316:	7a3b      	ldrb	r3, [r7, #8]
 8000318:	005b      	lsls	r3, r3, #1
 800031a:	fa02 f303 	lsl.w	r3, r2, r3
 800031e:	461a      	mov	r2, r3
 8000320:	697b      	ldr	r3, [r7, #20]
 8000322:	4313      	orrs	r3, r2
 8000324:	617b      	str	r3, [r7, #20]
    gpio_opt.Port->PUPDR = reg;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	697a      	ldr	r2, [r7, #20]
 800032a:	60da      	str	r2, [r3, #12]

    // GPIO Mode
    reg = gpio_opt.Port->MODER;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	617b      	str	r3, [r7, #20]
    reg &= ~(0x03 << (gpio_opt.Pin * 2));           // clear bits
 8000332:	7a3b      	ldrb	r3, [r7, #8]
 8000334:	005b      	lsls	r3, r3, #1
 8000336:	2203      	movs	r2, #3
 8000338:	fa02 f303 	lsl.w	r3, r2, r3
 800033c:	43db      	mvns	r3, r3
 800033e:	461a      	mov	r2, r3
 8000340:	697b      	ldr	r3, [r7, #20]
 8000342:	4013      	ands	r3, r2
 8000344:	617b      	str	r3, [r7, #20]
    reg |= (gpio_opt.Mode << (gpio_opt.Pin * 2)); // write bits
 8000346:	7a7b      	ldrb	r3, [r7, #9]
 8000348:	461a      	mov	r2, r3
 800034a:	7a3b      	ldrb	r3, [r7, #8]
 800034c:	005b      	lsls	r3, r3, #1
 800034e:	fa02 f303 	lsl.w	r3, r2, r3
 8000352:	461a      	mov	r2, r3
 8000354:	697b      	ldr	r3, [r7, #20]
 8000356:	4313      	orrs	r3, r2
 8000358:	617b      	str	r3, [r7, #20]
    gpio_opt.Port->MODER = reg;
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	697a      	ldr	r2, [r7, #20]
 800035e:	601a      	str	r2, [r3, #0]


    // Alternate function
    if (gpio_opt.Pin < 8) {
 8000360:	7a3b      	ldrb	r3, [r7, #8]
 8000362:	2b07      	cmp	r3, #7
 8000364:	d81a      	bhi.n	800039c <gpio_configure_pin+0x11c>
        reg = gpio_opt.Port->AFR[0];
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	6a1b      	ldr	r3, [r3, #32]
 800036a:	617b      	str	r3, [r7, #20]
        reg &= ~(0x0F << (gpio_opt.Pin * 4));
 800036c:	7a3b      	ldrb	r3, [r7, #8]
 800036e:	009b      	lsls	r3, r3, #2
 8000370:	220f      	movs	r2, #15
 8000372:	fa02 f303 	lsl.w	r3, r2, r3
 8000376:	43db      	mvns	r3, r3
 8000378:	461a      	mov	r2, r3
 800037a:	697b      	ldr	r3, [r7, #20]
 800037c:	4013      	ands	r3, r2
 800037e:	617b      	str	r3, [r7, #20]
        reg |= (gpio_opt.Alternate << (gpio_opt.Pin * 4));
 8000380:	7b7b      	ldrb	r3, [r7, #13]
 8000382:	461a      	mov	r2, r3
 8000384:	7a3b      	ldrb	r3, [r7, #8]
 8000386:	009b      	lsls	r3, r3, #2
 8000388:	fa02 f303 	lsl.w	r3, r2, r3
 800038c:	461a      	mov	r2, r3
 800038e:	697b      	ldr	r3, [r7, #20]
 8000390:	4313      	orrs	r3, r2
 8000392:	617b      	str	r3, [r7, #20]
        gpio_opt.Port->AFR[0] = reg;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	697a      	ldr	r2, [r7, #20]
 8000398:	621a      	str	r2, [r3, #32]
 800039a:	e01d      	b.n	80003d8 <gpio_configure_pin+0x158>
    } else {
        reg = gpio_opt.Port->AFR[1];
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a0:	617b      	str	r3, [r7, #20]
        reg &= ~(0x0F << ((gpio_opt.Pin - 8) * 4));
 80003a2:	7a3b      	ldrb	r3, [r7, #8]
 80003a4:	3b08      	subs	r3, #8
 80003a6:	009b      	lsls	r3, r3, #2
 80003a8:	220f      	movs	r2, #15
 80003aa:	fa02 f303 	lsl.w	r3, r2, r3
 80003ae:	43db      	mvns	r3, r3
 80003b0:	461a      	mov	r2, r3
 80003b2:	697b      	ldr	r3, [r7, #20]
 80003b4:	4013      	ands	r3, r2
 80003b6:	617b      	str	r3, [r7, #20]
        reg |= (gpio_opt.Alternate << ((gpio_opt.Pin - 8) * 4));
 80003b8:	7b7b      	ldrb	r3, [r7, #13]
 80003ba:	461a      	mov	r2, r3
 80003bc:	7a3b      	ldrb	r3, [r7, #8]
 80003be:	3b08      	subs	r3, #8
 80003c0:	009b      	lsls	r3, r3, #2
 80003c2:	fa02 f303 	lsl.w	r3, r2, r3
 80003c6:	461a      	mov	r2, r3
 80003c8:	697b      	ldr	r3, [r7, #20]
 80003ca:	4313      	orrs	r3, r2
 80003cc:	617b      	str	r3, [r7, #20]
        gpio_opt.Port->AFR[1] = reg;
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	697a      	ldr	r2, [r7, #20]
 80003d2:	625a      	str	r2, [r3, #36]	; 0x24
 80003d4:	e000      	b.n	80003d8 <gpio_configure_pin+0x158>
    if (gpio_opt.Port == NULL) return;
 80003d6:	bf00      	nop
    }
}
 80003d8:	371c      	adds	r7, #28
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
	...

080003e4 <init_gpio_options>:

void init_gpio_options(gpio_opt_t options)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(options.Port == GPIOA) RCC->AHB1ENR |=   RCC_AHB1ENR_GPIOAEN;
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4a18      	ldr	r2, [pc, #96]	; (8000454 <init_gpio_options+0x70>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d105      	bne.n	8000404 <init_gpio_options+0x20>
 80003f8:	4b17      	ldr	r3, [pc, #92]	; (8000458 <init_gpio_options+0x74>)
 80003fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fc:	4a16      	ldr	r2, [pc, #88]	; (8000458 <init_gpio_options+0x74>)
 80003fe:	f043 0301 	orr.w	r3, r3, #1
 8000402:	6313      	str	r3, [r2, #48]	; 0x30
	if(options.Port == GPIOB) RCC->AHB1ENR |=   RCC_AHB1ENR_GPIOBEN;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	4a15      	ldr	r2, [pc, #84]	; (800045c <init_gpio_options+0x78>)
 8000408:	4293      	cmp	r3, r2
 800040a:	d105      	bne.n	8000418 <init_gpio_options+0x34>
 800040c:	4b12      	ldr	r3, [pc, #72]	; (8000458 <init_gpio_options+0x74>)
 800040e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000410:	4a11      	ldr	r2, [pc, #68]	; (8000458 <init_gpio_options+0x74>)
 8000412:	f043 0302 	orr.w	r3, r3, #2
 8000416:	6313      	str	r3, [r2, #48]	; 0x30
	if(options.Port == GPIOC) RCC->AHB1ENR |=   RCC_AHB1ENR_GPIOCEN;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4a11      	ldr	r2, [pc, #68]	; (8000460 <init_gpio_options+0x7c>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d105      	bne.n	800042c <init_gpio_options+0x48>
 8000420:	4b0d      	ldr	r3, [pc, #52]	; (8000458 <init_gpio_options+0x74>)
 8000422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000424:	4a0c      	ldr	r2, [pc, #48]	; (8000458 <init_gpio_options+0x74>)
 8000426:	f043 0304 	orr.w	r3, r3, #4
 800042a:	6313      	str	r3, [r2, #48]	; 0x30
	if(options.Port == GPIOD) RCC->AHB1ENR |=   RCC_AHB1ENR_GPIODEN;
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4a0d      	ldr	r2, [pc, #52]	; (8000464 <init_gpio_options+0x80>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d105      	bne.n	8000440 <init_gpio_options+0x5c>
 8000434:	4b08      	ldr	r3, [pc, #32]	; (8000458 <init_gpio_options+0x74>)
 8000436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000438:	4a07      	ldr	r2, [pc, #28]	; (8000458 <init_gpio_options+0x74>)
 800043a:	f043 0308 	orr.w	r3, r3, #8
 800043e:	6313      	str	r3, [r2, #48]	; 0x30


    gpio_configure_pin(options);
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000446:	f7ff ff1b 	bl	8000280 <gpio_configure_pin>
}
 800044a:	bf00      	nop
 800044c:	3710      	adds	r7, #16
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	40020000 	.word	0x40020000
 8000458:	40023800 	.word	0x40023800
 800045c:	40020400 	.word	0x40020400
 8000460:	40020800 	.word	0x40020800
 8000464:	40020c00 	.word	0x40020c00

08000468 <init_gpio>:


void init_gpio(GPIO_TypeDef* port, uint8_t pin, uint8_t mode, uint8_t alternate, uint8_t type, uint8_t pull, uint8_t speed)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b086      	sub	sp, #24
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	4608      	mov	r0, r1
 8000472:	4611      	mov	r1, r2
 8000474:	461a      	mov	r2, r3
 8000476:	4603      	mov	r3, r0
 8000478:	70fb      	strb	r3, [r7, #3]
 800047a:	460b      	mov	r3, r1
 800047c:	70bb      	strb	r3, [r7, #2]
 800047e:	4613      	mov	r3, r2
 8000480:	707b      	strb	r3, [r7, #1]
    gpio_opt_t gpio_opt;

    gpio_opt.Port = port;
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	60fb      	str	r3, [r7, #12]
    gpio_opt.Pin = pin;
 8000486:	78fb      	ldrb	r3, [r7, #3]
 8000488:	743b      	strb	r3, [r7, #16]
    gpio_opt.Mode = mode;
 800048a:	78bb      	ldrb	r3, [r7, #2]
 800048c:	747b      	strb	r3, [r7, #17]
    gpio_opt.Alternate = alternate;
 800048e:	787b      	ldrb	r3, [r7, #1]
 8000490:	757b      	strb	r3, [r7, #21]
    gpio_opt.Type = type;
 8000492:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000496:	74bb      	strb	r3, [r7, #18]
    gpio_opt.Pull = pull;
 8000498:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800049c:	74fb      	strb	r3, [r7, #19]
    gpio_opt.Speed = speed;
 800049e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80004a2:	753b      	strb	r3, [r7, #20]

    init_gpio_options(gpio_opt);
 80004a4:	f107 030c 	add.w	r3, r7, #12
 80004a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80004ac:	f7ff ff9a 	bl	80003e4 <init_gpio_options>
}
 80004b0:	bf00      	nop
 80004b2:	3718      	adds	r7, #24
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	6039      	str	r1, [r7, #0]
 80004c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	db0a      	blt.n	80004e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	b2da      	uxtb	r2, r3
 80004d0:	490c      	ldr	r1, [pc, #48]	; (8000504 <__NVIC_SetPriority+0x4c>)
 80004d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004d6:	0112      	lsls	r2, r2, #4
 80004d8:	b2d2      	uxtb	r2, r2
 80004da:	440b      	add	r3, r1
 80004dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004e0:	e00a      	b.n	80004f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	b2da      	uxtb	r2, r3
 80004e6:	4908      	ldr	r1, [pc, #32]	; (8000508 <__NVIC_SetPriority+0x50>)
 80004e8:	79fb      	ldrb	r3, [r7, #7]
 80004ea:	f003 030f 	and.w	r3, r3, #15
 80004ee:	3b04      	subs	r3, #4
 80004f0:	0112      	lsls	r2, r2, #4
 80004f2:	b2d2      	uxtb	r2, r2
 80004f4:	440b      	add	r3, r1
 80004f6:	761a      	strb	r2, [r3, #24]
}
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr
 8000504:	e000e100 	.word	0xe000e100
 8000508:	e000ed00 	.word	0xe000ed00

0800050c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	3b01      	subs	r3, #1
 8000518:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800051c:	d301      	bcc.n	8000522 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800051e:	2301      	movs	r3, #1
 8000520:	e00f      	b.n	8000542 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000522:	4a0a      	ldr	r2, [pc, #40]	; (800054c <SysTick_Config+0x40>)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	3b01      	subs	r3, #1
 8000528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800052a:	210f      	movs	r1, #15
 800052c:	f04f 30ff 	mov.w	r0, #4294967295
 8000530:	f7ff ffc2 	bl	80004b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000534:	4b05      	ldr	r3, [pc, #20]	; (800054c <SysTick_Config+0x40>)
 8000536:	2200      	movs	r2, #0
 8000538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800053a:	4b04      	ldr	r3, [pc, #16]	; (800054c <SysTick_Config+0x40>)
 800053c:	2207      	movs	r2, #7
 800053e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000540:	2300      	movs	r3, #0
}
 8000542:	4618      	mov	r0, r3
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	e000e010 	.word	0xe000e010

08000550 <init_platform>:
static void init_clock(void);
static void init_systick(void);


void init_platform(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
	init_clock();
 8000554:	f000 f83a 	bl	80005cc <init_clock>
	init_systick();
 8000558:	f000 f83f 	bl	80005da <init_systick>
}
 800055c:	bf00      	nop
 800055e:	bd80      	pop	{r7, pc}

08000560 <delay_ms>:

void delay_ms(uint32_t delay)
{
 8000560:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000564:	b086      	sub	sp, #24
 8000566:	af00      	add	r7, sp, #0
 8000568:	6078      	str	r0, [r7, #4]
	uint64_t prev, now;
	prev = now = get_sysTicks();		/* Get current sysTickTime */
 800056a:	f000 f821 	bl	80005b0 <get_sysTicks>
 800056e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8000572:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000576:	e9c7 2302 	strd	r2, r3, [r7, #8]

	while ((now - prev) < delay) {
 800057a:	e004      	b.n	8000586 <delay_ms+0x26>
    	__WFI();
 800057c:	bf30      	wfi
		now = get_sysTicks();			/* Wait for interrupt, and check if enough time has passed */
 800057e:	f000 f817 	bl	80005b0 <get_sysTicks>
 8000582:	e9c7 0104 	strd	r0, r1, [r7, #16]
	while ((now - prev) < delay) {
 8000586:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800058a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800058e:	1a84      	subs	r4, r0, r2
 8000590:	eb61 0503 	sbc.w	r5, r1, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2200      	movs	r2, #0
 8000598:	4698      	mov	r8, r3
 800059a:	4691      	mov	r9, r2
 800059c:	4544      	cmp	r4, r8
 800059e:	eb75 0309 	sbcs.w	r3, r5, r9
 80005a2:	d3eb      	bcc.n	800057c <delay_ms+0x1c>
	}
}
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	3718      	adds	r7, #24
 80005aa:	46bd      	mov	sp, r7
 80005ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080005b0 <get_sysTicks>:

uint64_t get_sysTicks(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
	return gSysticks;
 80005b4:	4b04      	ldr	r3, [pc, #16]	; (80005c8 <get_sysTicks+0x18>)
 80005b6:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 80005ba:	4610      	mov	r0, r2
 80005bc:	4619      	mov	r1, r3
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000088 	.word	0x20000088

080005cc <init_clock>:


static void init_clock(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
	/* Initialise clock to something reasonable */
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr

080005da <init_systick>:

static void init_systick(void)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	af00      	add	r7, sp, #0
	SysTick_Config(F_CPU / 1000);		// every ms
 80005de:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 80005e2:	f7ff ff93 	bl	800050c <SysTick_Config>
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <SysTick_Handler>:
/* Systick handler runs every ms */
void SysTick_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
	gSysticks++;
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <SysTick_Handler+0x20>)
 80005f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005f6:	1c50      	adds	r0, r2, #1
 80005f8:	f143 0100 	adc.w	r1, r3, #0
 80005fc:	4b03      	ldr	r3, [pc, #12]	; (800060c <SysTick_Handler+0x20>)
 80005fe:	e9c3 0100 	strd	r0, r1, [r3]
}
 8000602:	bf00      	nop
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	20000088 	.word	0x20000088

08000610 <main>:
/* Semihosting */
extern void initialise_monitor_handles(void);


int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af04      	add	r7, sp, #16
	initialise_monitor_handles();
 8000616:	f000 fa9b 	bl	8000b50 <initialise_monitor_handles>

	init_platform();
 800061a:	f7ff ff99 	bl	8000550 <init_platform>
	init_gpio(GPIOD, GPIO_15, GPIO_MODER_OUTPUT, GPIO_ALTFUNC_0, GPIO_OTYPER_PUSHPULL, GPIO_PULL_NONE, GPIO_OSPEEDR_LOW);
 800061e:	2300      	movs	r3, #0
 8000620:	9302      	str	r3, [sp, #8]
 8000622:	2300      	movs	r3, #0
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	2300      	movs	r3, #0
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2300      	movs	r3, #0
 800062c:	2201      	movs	r2, #1
 800062e:	210f      	movs	r1, #15
 8000630:	480b      	ldr	r0, [pc, #44]	; (8000660 <main+0x50>)
 8000632:	f7ff ff19 	bl	8000468 <init_gpio>
	gpio_write(GPIOD, GPIO_15, GPIO_OUTPUT_HIGH);
 8000636:	2201      	movs	r2, #1
 8000638:	210f      	movs	r1, #15
 800063a:	4809      	ldr	r0, [pc, #36]	; (8000660 <main+0x50>)
 800063c:	f7ff fdd4 	bl	80001e8 <gpio_write>
	printf("Done\n");
 8000640:	4808      	ldr	r0, [pc, #32]	; (8000664 <main+0x54>)
 8000642:	f000 fc05 	bl	8000e50 <puts>
	while(1)
	{
		delay_ms(1000);
 8000646:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800064a:	f7ff ff89 	bl	8000560 <delay_ms>
		gpio_toggle(GPIOD, GPIO_15);
 800064e:	210f      	movs	r1, #15
 8000650:	4803      	ldr	r0, [pc, #12]	; (8000660 <main+0x50>)
 8000652:	f7ff fdf7 	bl	8000244 <gpio_toggle>
		printf("Hoid\n");
 8000656:	4804      	ldr	r0, [pc, #16]	; (8000668 <main+0x58>)
 8000658:	f000 fbfa 	bl	8000e50 <puts>
		delay_ms(1000);
 800065c:	e7f3      	b.n	8000646 <main+0x36>
 800065e:	bf00      	nop
 8000660:	40020c00 	.word	0x40020c00
 8000664:	08001590 	.word	0x08001590
 8000668:	08001598 	.word	0x08001598

0800066c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800066c:	f8df d030 	ldr.w	sp, [pc, #48]	; 80006a0 <LoopFillZerobss+0xe>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000670:	480c      	ldr	r0, [pc, #48]	; (80006a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000672:	490d      	ldr	r1, [pc, #52]	; (80006a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000674:	4a0d      	ldr	r2, [pc, #52]	; (80006ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000678:	e002      	b.n	8000680 <LoopCopyDataInit>

0800067a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800067c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067e:	3304      	adds	r3, #4

08000680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000684:	d3f9      	bcc.n	800067a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000686:	4a0a      	ldr	r2, [pc, #40]	; (80006b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000688:	4c0a      	ldr	r4, [pc, #40]	; (80006b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800068a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800068c:	e001      	b.n	8000692 <LoopFillZerobss>

0800068e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000690:	3204      	adds	r2, #4

08000692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000694:	d3fb      	bcc.n	800068e <FillZerobss>

/* Call the clock system intitialization function.*/
//  bl  SystemInit // BroJZ: not needed for minimal configuration
/* Call static constructors */
    bl __libc_init_array
 8000696:	f000 fd0f 	bl	80010b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800069a:	f7ff ffb9 	bl	8000610 <main>
  bx  lr    
 800069e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80006a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80006ac:	080015c0 	.word	0x080015c0
  ldr r2, =_sbss
 80006b0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80006b4:	2000028c 	.word	0x2000028c

080006b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006b8:	e7fe      	b.n	80006b8 <ADC_IRQHandler>
	...

080006bc <findslot>:
 80006bc:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <findslot+0x2c>)
 80006be:	b510      	push	{r4, lr}
 80006c0:	4604      	mov	r4, r0
 80006c2:	6818      	ldr	r0, [r3, #0]
 80006c4:	b118      	cbz	r0, 80006ce <findslot+0x12>
 80006c6:	6a03      	ldr	r3, [r0, #32]
 80006c8:	b90b      	cbnz	r3, 80006ce <findslot+0x12>
 80006ca:	f000 fb37 	bl	8000d3c <__sinit>
 80006ce:	2c13      	cmp	r4, #19
 80006d0:	d807      	bhi.n	80006e2 <findslot+0x26>
 80006d2:	4806      	ldr	r0, [pc, #24]	; (80006ec <findslot+0x30>)
 80006d4:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80006d8:	3201      	adds	r2, #1
 80006da:	d002      	beq.n	80006e2 <findslot+0x26>
 80006dc:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80006e0:	bd10      	pop	{r4, pc}
 80006e2:	2000      	movs	r0, #0
 80006e4:	e7fc      	b.n	80006e0 <findslot+0x24>
 80006e6:	bf00      	nop
 80006e8:	20000064 	.word	0x20000064
 80006ec:	200000a0 	.word	0x200000a0

080006f0 <error>:
 80006f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006f2:	4604      	mov	r4, r0
 80006f4:	f000 fcda 	bl	80010ac <__errno>
 80006f8:	2613      	movs	r6, #19
 80006fa:	4605      	mov	r5, r0
 80006fc:	2700      	movs	r7, #0
 80006fe:	4630      	mov	r0, r6
 8000700:	4639      	mov	r1, r7
 8000702:	beab      	bkpt	0x00ab
 8000704:	4606      	mov	r6, r0
 8000706:	602e      	str	r6, [r5, #0]
 8000708:	4620      	mov	r0, r4
 800070a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800070c <checkerror>:
 800070c:	1c43      	adds	r3, r0, #1
 800070e:	d101      	bne.n	8000714 <checkerror+0x8>
 8000710:	f7ff bfee 	b.w	80006f0 <error>
 8000714:	4770      	bx	lr

08000716 <_swiread>:
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	b085      	sub	sp, #20
 800071a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800071e:	9203      	str	r2, [sp, #12]
 8000720:	2406      	movs	r4, #6
 8000722:	ad01      	add	r5, sp, #4
 8000724:	4620      	mov	r0, r4
 8000726:	4629      	mov	r1, r5
 8000728:	beab      	bkpt	0x00ab
 800072a:	4604      	mov	r4, r0
 800072c:	4620      	mov	r0, r4
 800072e:	f7ff ffed 	bl	800070c <checkerror>
 8000732:	b005      	add	sp, #20
 8000734:	bd30      	pop	{r4, r5, pc}

08000736 <_read>:
 8000736:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000738:	4615      	mov	r5, r2
 800073a:	9101      	str	r1, [sp, #4]
 800073c:	f7ff ffbe 	bl	80006bc <findslot>
 8000740:	9901      	ldr	r1, [sp, #4]
 8000742:	4604      	mov	r4, r0
 8000744:	b938      	cbnz	r0, 8000756 <_read+0x20>
 8000746:	f000 fcb1 	bl	80010ac <__errno>
 800074a:	2309      	movs	r3, #9
 800074c:	6003      	str	r3, [r0, #0]
 800074e:	f04f 30ff 	mov.w	r0, #4294967295
 8000752:	b003      	add	sp, #12
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	6800      	ldr	r0, [r0, #0]
 8000758:	462a      	mov	r2, r5
 800075a:	f7ff ffdc 	bl	8000716 <_swiread>
 800075e:	1c43      	adds	r3, r0, #1
 8000760:	d0f7      	beq.n	8000752 <_read+0x1c>
 8000762:	6863      	ldr	r3, [r4, #4]
 8000764:	1a2a      	subs	r2, r5, r0
 8000766:	4413      	add	r3, r2
 8000768:	6063      	str	r3, [r4, #4]
 800076a:	4610      	mov	r0, r2
 800076c:	e7f1      	b.n	8000752 <_read+0x1c>

0800076e <_swilseek>:
 800076e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000770:	460c      	mov	r4, r1
 8000772:	4616      	mov	r6, r2
 8000774:	f7ff ffa2 	bl	80006bc <findslot>
 8000778:	4605      	mov	r5, r0
 800077a:	b940      	cbnz	r0, 800078e <_swilseek+0x20>
 800077c:	f000 fc96 	bl	80010ac <__errno>
 8000780:	2309      	movs	r3, #9
 8000782:	6003      	str	r3, [r0, #0]
 8000784:	f04f 34ff 	mov.w	r4, #4294967295
 8000788:	4620      	mov	r0, r4
 800078a:	b003      	add	sp, #12
 800078c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800078e:	2e02      	cmp	r6, #2
 8000790:	d903      	bls.n	800079a <_swilseek+0x2c>
 8000792:	f000 fc8b 	bl	80010ac <__errno>
 8000796:	2316      	movs	r3, #22
 8000798:	e7f3      	b.n	8000782 <_swilseek+0x14>
 800079a:	2e01      	cmp	r6, #1
 800079c:	d112      	bne.n	80007c4 <_swilseek+0x56>
 800079e:	6843      	ldr	r3, [r0, #4]
 80007a0:	18e4      	adds	r4, r4, r3
 80007a2:	d4f6      	bmi.n	8000792 <_swilseek+0x24>
 80007a4:	682b      	ldr	r3, [r5, #0]
 80007a6:	260a      	movs	r6, #10
 80007a8:	e9cd 3400 	strd	r3, r4, [sp]
 80007ac:	466f      	mov	r7, sp
 80007ae:	4630      	mov	r0, r6
 80007b0:	4639      	mov	r1, r7
 80007b2:	beab      	bkpt	0x00ab
 80007b4:	4606      	mov	r6, r0
 80007b6:	4630      	mov	r0, r6
 80007b8:	f7ff ffa8 	bl	800070c <checkerror>
 80007bc:	2800      	cmp	r0, #0
 80007be:	dbe1      	blt.n	8000784 <_swilseek+0x16>
 80007c0:	606c      	str	r4, [r5, #4]
 80007c2:	e7e1      	b.n	8000788 <_swilseek+0x1a>
 80007c4:	2e02      	cmp	r6, #2
 80007c6:	6803      	ldr	r3, [r0, #0]
 80007c8:	d1ec      	bne.n	80007a4 <_swilseek+0x36>
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	260c      	movs	r6, #12
 80007ce:	466f      	mov	r7, sp
 80007d0:	4630      	mov	r0, r6
 80007d2:	4639      	mov	r1, r7
 80007d4:	beab      	bkpt	0x00ab
 80007d6:	4606      	mov	r6, r0
 80007d8:	4630      	mov	r0, r6
 80007da:	f7ff ff97 	bl	800070c <checkerror>
 80007de:	1c43      	adds	r3, r0, #1
 80007e0:	d0d0      	beq.n	8000784 <_swilseek+0x16>
 80007e2:	4404      	add	r4, r0
 80007e4:	e7de      	b.n	80007a4 <_swilseek+0x36>

080007e6 <_lseek>:
 80007e6:	f7ff bfc2 	b.w	800076e <_swilseek>

080007ea <_swiwrite>:
 80007ea:	b530      	push	{r4, r5, lr}
 80007ec:	b085      	sub	sp, #20
 80007ee:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80007f2:	9203      	str	r2, [sp, #12]
 80007f4:	2405      	movs	r4, #5
 80007f6:	ad01      	add	r5, sp, #4
 80007f8:	4620      	mov	r0, r4
 80007fa:	4629      	mov	r1, r5
 80007fc:	beab      	bkpt	0x00ab
 80007fe:	4604      	mov	r4, r0
 8000800:	4620      	mov	r0, r4
 8000802:	f7ff ff83 	bl	800070c <checkerror>
 8000806:	b005      	add	sp, #20
 8000808:	bd30      	pop	{r4, r5, pc}

0800080a <_write>:
 800080a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800080c:	4615      	mov	r5, r2
 800080e:	9101      	str	r1, [sp, #4]
 8000810:	f7ff ff54 	bl	80006bc <findslot>
 8000814:	9901      	ldr	r1, [sp, #4]
 8000816:	4604      	mov	r4, r0
 8000818:	b930      	cbnz	r0, 8000828 <_write+0x1e>
 800081a:	f000 fc47 	bl	80010ac <__errno>
 800081e:	2309      	movs	r3, #9
 8000820:	6003      	str	r3, [r0, #0]
 8000822:	f04f 30ff 	mov.w	r0, #4294967295
 8000826:	e012      	b.n	800084e <_write+0x44>
 8000828:	6800      	ldr	r0, [r0, #0]
 800082a:	462a      	mov	r2, r5
 800082c:	f7ff ffdd 	bl	80007ea <_swiwrite>
 8000830:	2800      	cmp	r0, #0
 8000832:	dbf6      	blt.n	8000822 <_write+0x18>
 8000834:	6862      	ldr	r2, [r4, #4]
 8000836:	1a2b      	subs	r3, r5, r0
 8000838:	441a      	add	r2, r3
 800083a:	42a8      	cmp	r0, r5
 800083c:	6062      	str	r2, [r4, #4]
 800083e:	d105      	bne.n	800084c <_write+0x42>
 8000840:	2000      	movs	r0, #0
 8000842:	b003      	add	sp, #12
 8000844:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000848:	f7ff bf52 	b.w	80006f0 <error>
 800084c:	4618      	mov	r0, r3
 800084e:	b003      	add	sp, #12
 8000850:	bd30      	pop	{r4, r5, pc}

08000852 <_swiclose>:
 8000852:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000854:	2402      	movs	r4, #2
 8000856:	9001      	str	r0, [sp, #4]
 8000858:	ad01      	add	r5, sp, #4
 800085a:	4620      	mov	r0, r4
 800085c:	4629      	mov	r1, r5
 800085e:	beab      	bkpt	0x00ab
 8000860:	4604      	mov	r4, r0
 8000862:	4620      	mov	r0, r4
 8000864:	f7ff ff52 	bl	800070c <checkerror>
 8000868:	b003      	add	sp, #12
 800086a:	bd30      	pop	{r4, r5, pc}

0800086c <_close>:
 800086c:	b538      	push	{r3, r4, r5, lr}
 800086e:	4605      	mov	r5, r0
 8000870:	f7ff ff24 	bl	80006bc <findslot>
 8000874:	4604      	mov	r4, r0
 8000876:	b930      	cbnz	r0, 8000886 <_close+0x1a>
 8000878:	f000 fc18 	bl	80010ac <__errno>
 800087c:	2309      	movs	r3, #9
 800087e:	6003      	str	r3, [r0, #0]
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	bd38      	pop	{r3, r4, r5, pc}
 8000886:	3d01      	subs	r5, #1
 8000888:	2d01      	cmp	r5, #1
 800088a:	d809      	bhi.n	80008a0 <_close+0x34>
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <_close+0x48>)
 800088e:	689a      	ldr	r2, [r3, #8]
 8000890:	691b      	ldr	r3, [r3, #16]
 8000892:	429a      	cmp	r2, r3
 8000894:	d104      	bne.n	80008a0 <_close+0x34>
 8000896:	f04f 33ff 	mov.w	r3, #4294967295
 800089a:	6003      	str	r3, [r0, #0]
 800089c:	2000      	movs	r0, #0
 800089e:	e7f1      	b.n	8000884 <_close+0x18>
 80008a0:	6820      	ldr	r0, [r4, #0]
 80008a2:	f7ff ffd6 	bl	8000852 <_swiclose>
 80008a6:	2800      	cmp	r0, #0
 80008a8:	d1ec      	bne.n	8000884 <_close+0x18>
 80008aa:	f04f 33ff 	mov.w	r3, #4294967295
 80008ae:	6023      	str	r3, [r4, #0]
 80008b0:	e7e8      	b.n	8000884 <_close+0x18>
 80008b2:	bf00      	nop
 80008b4:	200000a0 	.word	0x200000a0

080008b8 <_sbrk>:
 80008b8:	4a0d      	ldr	r2, [pc, #52]	; (80008f0 <_sbrk+0x38>)
 80008ba:	6811      	ldr	r1, [r2, #0]
 80008bc:	b510      	push	{r4, lr}
 80008be:	4603      	mov	r3, r0
 80008c0:	b909      	cbnz	r1, 80008c6 <_sbrk+0xe>
 80008c2:	490c      	ldr	r1, [pc, #48]	; (80008f4 <_sbrk+0x3c>)
 80008c4:	6011      	str	r1, [r2, #0]
 80008c6:	6810      	ldr	r0, [r2, #0]
 80008c8:	4669      	mov	r1, sp
 80008ca:	4403      	add	r3, r0
 80008cc:	428b      	cmp	r3, r1
 80008ce:	d806      	bhi.n	80008de <_sbrk+0x26>
 80008d0:	4909      	ldr	r1, [pc, #36]	; (80008f8 <_sbrk+0x40>)
 80008d2:	4c0a      	ldr	r4, [pc, #40]	; (80008fc <_sbrk+0x44>)
 80008d4:	6809      	ldr	r1, [r1, #0]
 80008d6:	42a1      	cmp	r1, r4
 80008d8:	d008      	beq.n	80008ec <_sbrk+0x34>
 80008da:	428b      	cmp	r3, r1
 80008dc:	d906      	bls.n	80008ec <_sbrk+0x34>
 80008de:	f000 fbe5 	bl	80010ac <__errno>
 80008e2:	230c      	movs	r3, #12
 80008e4:	6003      	str	r3, [r0, #0]
 80008e6:	f04f 30ff 	mov.w	r0, #4294967295
 80008ea:	bd10      	pop	{r4, pc}
 80008ec:	6013      	str	r3, [r2, #0]
 80008ee:	e7fc      	b.n	80008ea <_sbrk+0x32>
 80008f0:	20000090 	.word	0x20000090
 80008f4:	20000290 	.word	0x20000290
 80008f8:	20000000 	.word	0x20000000
 80008fc:	cafedead 	.word	0xcafedead

08000900 <_swistat>:
 8000900:	b570      	push	{r4, r5, r6, lr}
 8000902:	460c      	mov	r4, r1
 8000904:	f7ff feda 	bl	80006bc <findslot>
 8000908:	4605      	mov	r5, r0
 800090a:	b930      	cbnz	r0, 800091a <_swistat+0x1a>
 800090c:	f000 fbce 	bl	80010ac <__errno>
 8000910:	2309      	movs	r3, #9
 8000912:	6003      	str	r3, [r0, #0]
 8000914:	f04f 30ff 	mov.w	r0, #4294967295
 8000918:	bd70      	pop	{r4, r5, r6, pc}
 800091a:	6863      	ldr	r3, [r4, #4]
 800091c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000920:	6063      	str	r3, [r4, #4]
 8000922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000926:	64a3      	str	r3, [r4, #72]	; 0x48
 8000928:	260c      	movs	r6, #12
 800092a:	4630      	mov	r0, r6
 800092c:	4629      	mov	r1, r5
 800092e:	beab      	bkpt	0x00ab
 8000930:	4605      	mov	r5, r0
 8000932:	4628      	mov	r0, r5
 8000934:	f7ff feea 	bl	800070c <checkerror>
 8000938:	1c43      	adds	r3, r0, #1
 800093a:	bf1c      	itt	ne
 800093c:	6120      	strne	r0, [r4, #16]
 800093e:	2000      	movne	r0, #0
 8000940:	e7ea      	b.n	8000918 <_swistat+0x18>

08000942 <_fstat>:
 8000942:	460b      	mov	r3, r1
 8000944:	b510      	push	{r4, lr}
 8000946:	2100      	movs	r1, #0
 8000948:	4604      	mov	r4, r0
 800094a:	2258      	movs	r2, #88	; 0x58
 800094c:	4618      	mov	r0, r3
 800094e:	f000 fb5f 	bl	8001010 <memset>
 8000952:	4601      	mov	r1, r0
 8000954:	4620      	mov	r0, r4
 8000956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800095a:	f7ff bfd1 	b.w	8000900 <_swistat>

0800095e <_stat>:
 800095e:	b538      	push	{r3, r4, r5, lr}
 8000960:	460d      	mov	r5, r1
 8000962:	4604      	mov	r4, r0
 8000964:	2258      	movs	r2, #88	; 0x58
 8000966:	2100      	movs	r1, #0
 8000968:	4628      	mov	r0, r5
 800096a:	f000 fb51 	bl	8001010 <memset>
 800096e:	4620      	mov	r0, r4
 8000970:	2100      	movs	r1, #0
 8000972:	f000 f811 	bl	8000998 <_swiopen>
 8000976:	1c43      	adds	r3, r0, #1
 8000978:	4604      	mov	r4, r0
 800097a:	d00b      	beq.n	8000994 <_stat+0x36>
 800097c:	686b      	ldr	r3, [r5, #4]
 800097e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8000982:	606b      	str	r3, [r5, #4]
 8000984:	4629      	mov	r1, r5
 8000986:	f7ff ffbb 	bl	8000900 <_swistat>
 800098a:	4605      	mov	r5, r0
 800098c:	4620      	mov	r0, r4
 800098e:	f7ff ff6d 	bl	800086c <_close>
 8000992:	462c      	mov	r4, r5
 8000994:	4620      	mov	r0, r4
 8000996:	bd38      	pop	{r3, r4, r5, pc}

08000998 <_swiopen>:
 8000998:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800099c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8000a48 <_swiopen+0xb0>
 80009a0:	b097      	sub	sp, #92	; 0x5c
 80009a2:	4607      	mov	r7, r0
 80009a4:	460e      	mov	r6, r1
 80009a6:	2500      	movs	r5, #0
 80009a8:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 80009ac:	1c61      	adds	r1, r4, #1
 80009ae:	d037      	beq.n	8000a20 <_swiopen+0x88>
 80009b0:	3501      	adds	r5, #1
 80009b2:	2d14      	cmp	r5, #20
 80009b4:	d1f8      	bne.n	80009a8 <_swiopen+0x10>
 80009b6:	f000 fb79 	bl	80010ac <__errno>
 80009ba:	2318      	movs	r3, #24
 80009bc:	6003      	str	r3, [r0, #0]
 80009be:	f04f 34ff 	mov.w	r4, #4294967295
 80009c2:	e03d      	b.n	8000a40 <_swiopen+0xa8>
 80009c4:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80009c8:	f240 6301 	movw	r3, #1537	; 0x601
 80009cc:	07b2      	lsls	r2, r6, #30
 80009ce:	bf48      	it	mi
 80009d0:	f044 0402 	orrmi.w	r4, r4, #2
 80009d4:	421e      	tst	r6, r3
 80009d6:	bf18      	it	ne
 80009d8:	f044 0404 	orrne.w	r4, r4, #4
 80009dc:	0733      	lsls	r3, r6, #28
 80009de:	bf48      	it	mi
 80009e0:	f024 0404 	bicmi.w	r4, r4, #4
 80009e4:	4638      	mov	r0, r7
 80009e6:	bf48      	it	mi
 80009e8:	f044 0408 	orrmi.w	r4, r4, #8
 80009ec:	9700      	str	r7, [sp, #0]
 80009ee:	f7ff fbf3 	bl	80001d8 <strlen>
 80009f2:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80009f6:	2401      	movs	r4, #1
 80009f8:	4620      	mov	r0, r4
 80009fa:	4649      	mov	r1, r9
 80009fc:	beab      	bkpt	0x00ab
 80009fe:	4604      	mov	r4, r0
 8000a00:	2c00      	cmp	r4, #0
 8000a02:	db08      	blt.n	8000a16 <_swiopen+0x7e>
 8000a04:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8000a08:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	f8c8 3004 	str.w	r3, [r8, #4]
 8000a12:	462c      	mov	r4, r5
 8000a14:	e014      	b.n	8000a40 <_swiopen+0xa8>
 8000a16:	4620      	mov	r0, r4
 8000a18:	f7ff fe6a 	bl	80006f0 <error>
 8000a1c:	4604      	mov	r4, r0
 8000a1e:	e00f      	b.n	8000a40 <_swiopen+0xa8>
 8000a20:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8000a24:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8000a28:	46e9      	mov	r9, sp
 8000a2a:	d1cb      	bne.n	80009c4 <_swiopen+0x2c>
 8000a2c:	4649      	mov	r1, r9
 8000a2e:	4638      	mov	r0, r7
 8000a30:	f7ff ff95 	bl	800095e <_stat>
 8000a34:	3001      	adds	r0, #1
 8000a36:	d0c5      	beq.n	80009c4 <_swiopen+0x2c>
 8000a38:	f000 fb38 	bl	80010ac <__errno>
 8000a3c:	2311      	movs	r3, #17
 8000a3e:	6003      	str	r3, [r0, #0]
 8000a40:	4620      	mov	r0, r4
 8000a42:	b017      	add	sp, #92	; 0x5c
 8000a44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a48:	200000a0 	.word	0x200000a0

08000a4c <_get_semihosting_exts>:
 8000a4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000a50:	4606      	mov	r6, r0
 8000a52:	460f      	mov	r7, r1
 8000a54:	482a      	ldr	r0, [pc, #168]	; (8000b00 <_get_semihosting_exts+0xb4>)
 8000a56:	2100      	movs	r1, #0
 8000a58:	4615      	mov	r5, r2
 8000a5a:	f7ff ff9d 	bl	8000998 <_swiopen>
 8000a5e:	462a      	mov	r2, r5
 8000a60:	4604      	mov	r4, r0
 8000a62:	2100      	movs	r1, #0
 8000a64:	4630      	mov	r0, r6
 8000a66:	f000 fad3 	bl	8001010 <memset>
 8000a6a:	1c63      	adds	r3, r4, #1
 8000a6c:	d016      	beq.n	8000a9c <_get_semihosting_exts+0x50>
 8000a6e:	4620      	mov	r0, r4
 8000a70:	f7ff fe24 	bl	80006bc <findslot>
 8000a74:	f04f 080c 	mov.w	r8, #12
 8000a78:	4681      	mov	r9, r0
 8000a7a:	4640      	mov	r0, r8
 8000a7c:	4649      	mov	r1, r9
 8000a7e:	beab      	bkpt	0x00ab
 8000a80:	4680      	mov	r8, r0
 8000a82:	4640      	mov	r0, r8
 8000a84:	f7ff fe42 	bl	800070c <checkerror>
 8000a88:	2803      	cmp	r0, #3
 8000a8a:	dd02      	ble.n	8000a92 <_get_semihosting_exts+0x46>
 8000a8c:	1ec3      	subs	r3, r0, #3
 8000a8e:	42ab      	cmp	r3, r5
 8000a90:	dc08      	bgt.n	8000aa4 <_get_semihosting_exts+0x58>
 8000a92:	4620      	mov	r0, r4
 8000a94:	f7ff feea 	bl	800086c <_close>
 8000a98:	f04f 34ff 	mov.w	r4, #4294967295
 8000a9c:	4620      	mov	r0, r4
 8000a9e:	b003      	add	sp, #12
 8000aa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000aa4:	2204      	movs	r2, #4
 8000aa6:	eb0d 0102 	add.w	r1, sp, r2
 8000aaa:	4620      	mov	r0, r4
 8000aac:	f7ff fe43 	bl	8000736 <_read>
 8000ab0:	2803      	cmp	r0, #3
 8000ab2:	ddee      	ble.n	8000a92 <_get_semihosting_exts+0x46>
 8000ab4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000ab8:	2b53      	cmp	r3, #83	; 0x53
 8000aba:	d1ea      	bne.n	8000a92 <_get_semihosting_exts+0x46>
 8000abc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000ac0:	2b48      	cmp	r3, #72	; 0x48
 8000ac2:	d1e6      	bne.n	8000a92 <_get_semihosting_exts+0x46>
 8000ac4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8000ac8:	2b46      	cmp	r3, #70	; 0x46
 8000aca:	d1e2      	bne.n	8000a92 <_get_semihosting_exts+0x46>
 8000acc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000ad0:	2b42      	cmp	r3, #66	; 0x42
 8000ad2:	d1de      	bne.n	8000a92 <_get_semihosting_exts+0x46>
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	4639      	mov	r1, r7
 8000ad8:	4620      	mov	r0, r4
 8000ada:	f7ff fe48 	bl	800076e <_swilseek>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	dbd7      	blt.n	8000a92 <_get_semihosting_exts+0x46>
 8000ae2:	462a      	mov	r2, r5
 8000ae4:	4631      	mov	r1, r6
 8000ae6:	4620      	mov	r0, r4
 8000ae8:	f7ff fe25 	bl	8000736 <_read>
 8000aec:	4605      	mov	r5, r0
 8000aee:	4620      	mov	r0, r4
 8000af0:	f7ff febc 	bl	800086c <_close>
 8000af4:	4628      	mov	r0, r5
 8000af6:	f7ff fe09 	bl	800070c <checkerror>
 8000afa:	4604      	mov	r4, r0
 8000afc:	e7ce      	b.n	8000a9c <_get_semihosting_exts+0x50>
 8000afe:	bf00      	nop
 8000b00:	0800159d 	.word	0x0800159d

08000b04 <initialise_semihosting_exts>:
 8000b04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000b06:	4d0a      	ldr	r5, [pc, #40]	; (8000b30 <initialise_semihosting_exts+0x2c>)
 8000b08:	4c0a      	ldr	r4, [pc, #40]	; (8000b34 <initialise_semihosting_exts+0x30>)
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	a801      	add	r0, sp, #4
 8000b10:	6029      	str	r1, [r5, #0]
 8000b12:	6022      	str	r2, [r4, #0]
 8000b14:	f7ff ff9a 	bl	8000a4c <_get_semihosting_exts>
 8000b18:	2800      	cmp	r0, #0
 8000b1a:	dd07      	ble.n	8000b2c <initialise_semihosting_exts+0x28>
 8000b1c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000b20:	f003 0201 	and.w	r2, r3, #1
 8000b24:	f003 0302 	and.w	r3, r3, #2
 8000b28:	602a      	str	r2, [r5, #0]
 8000b2a:	6023      	str	r3, [r4, #0]
 8000b2c:	b003      	add	sp, #12
 8000b2e:	bd30      	pop	{r4, r5, pc}
 8000b30:	20000004 	.word	0x20000004
 8000b34:	20000008 	.word	0x20000008

08000b38 <_has_ext_stdout_stderr>:
 8000b38:	b510      	push	{r4, lr}
 8000b3a:	4c04      	ldr	r4, [pc, #16]	; (8000b4c <_has_ext_stdout_stderr+0x14>)
 8000b3c:	6823      	ldr	r3, [r4, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	da01      	bge.n	8000b46 <_has_ext_stdout_stderr+0xe>
 8000b42:	f7ff ffdf 	bl	8000b04 <initialise_semihosting_exts>
 8000b46:	6820      	ldr	r0, [r4, #0]
 8000b48:	bd10      	pop	{r4, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000008 	.word	0x20000008

08000b50 <initialise_monitor_handles>:
 8000b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b54:	b085      	sub	sp, #20
 8000b56:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8000c08 <initialise_monitor_handles+0xb8>
 8000b5a:	f8cd 9004 	str.w	r9, [sp, #4]
 8000b5e:	2303      	movs	r3, #3
 8000b60:	2400      	movs	r4, #0
 8000b62:	9303      	str	r3, [sp, #12]
 8000b64:	af01      	add	r7, sp, #4
 8000b66:	9402      	str	r4, [sp, #8]
 8000b68:	2501      	movs	r5, #1
 8000b6a:	4628      	mov	r0, r5
 8000b6c:	4639      	mov	r1, r7
 8000b6e:	beab      	bkpt	0x00ab
 8000b70:	4605      	mov	r5, r0
 8000b72:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8000c0c <initialise_monitor_handles+0xbc>
 8000b76:	4623      	mov	r3, r4
 8000b78:	4c20      	ldr	r4, [pc, #128]	; (8000bfc <initialise_monitor_handles+0xac>)
 8000b7a:	f8c8 5000 	str.w	r5, [r8]
 8000b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8000b82:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8000b86:	3301      	adds	r3, #1
 8000b88:	2b14      	cmp	r3, #20
 8000b8a:	d1fa      	bne.n	8000b82 <initialise_monitor_handles+0x32>
 8000b8c:	f7ff ffd4 	bl	8000b38 <_has_ext_stdout_stderr>
 8000b90:	4d1b      	ldr	r5, [pc, #108]	; (8000c00 <initialise_monitor_handles+0xb0>)
 8000b92:	b1d0      	cbz	r0, 8000bca <initialise_monitor_handles+0x7a>
 8000b94:	f04f 0a03 	mov.w	sl, #3
 8000b98:	2304      	movs	r3, #4
 8000b9a:	f8cd 9004 	str.w	r9, [sp, #4]
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	f8cd a00c 	str.w	sl, [sp, #12]
 8000ba4:	9302      	str	r3, [sp, #8]
 8000ba6:	4630      	mov	r0, r6
 8000ba8:	4639      	mov	r1, r7
 8000baa:	beab      	bkpt	0x00ab
 8000bac:	4683      	mov	fp, r0
 8000bae:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <initialise_monitor_handles+0xb4>)
 8000bb0:	f8cd 9004 	str.w	r9, [sp, #4]
 8000bb4:	f8c3 b000 	str.w	fp, [r3]
 8000bb8:	2308      	movs	r3, #8
 8000bba:	f8cd a00c 	str.w	sl, [sp, #12]
 8000bbe:	9302      	str	r3, [sp, #8]
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	beab      	bkpt	0x00ab
 8000bc6:	4606      	mov	r6, r0
 8000bc8:	602e      	str	r6, [r5, #0]
 8000bca:	682b      	ldr	r3, [r5, #0]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	bf02      	ittt	eq
 8000bd0:	4b0c      	ldreq	r3, [pc, #48]	; (8000c04 <initialise_monitor_handles+0xb4>)
 8000bd2:	681b      	ldreq	r3, [r3, #0]
 8000bd4:	602b      	streq	r3, [r5, #0]
 8000bd6:	2600      	movs	r6, #0
 8000bd8:	f8d8 3000 	ldr.w	r3, [r8]
 8000bdc:	6023      	str	r3, [r4, #0]
 8000bde:	6066      	str	r6, [r4, #4]
 8000be0:	f7ff ffaa 	bl	8000b38 <_has_ext_stdout_stderr>
 8000be4:	b130      	cbz	r0, 8000bf4 <initialise_monitor_handles+0xa4>
 8000be6:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <initialise_monitor_handles+0xb4>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8000bee:	682b      	ldr	r3, [r5, #0]
 8000bf0:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8000bf4:	b005      	add	sp, #20
 8000bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200000a0 	.word	0x200000a0
 8000c00:	20000094 	.word	0x20000094
 8000c04:	2000009c 	.word	0x2000009c
 8000c08:	080015b3 	.word	0x080015b3
 8000c0c:	20000098 	.word	0x20000098

08000c10 <_isatty>:
 8000c10:	b570      	push	{r4, r5, r6, lr}
 8000c12:	f7ff fd53 	bl	80006bc <findslot>
 8000c16:	2509      	movs	r5, #9
 8000c18:	4604      	mov	r4, r0
 8000c1a:	b920      	cbnz	r0, 8000c26 <_isatty+0x16>
 8000c1c:	f000 fa46 	bl	80010ac <__errno>
 8000c20:	6005      	str	r5, [r0, #0]
 8000c22:	4620      	mov	r0, r4
 8000c24:	bd70      	pop	{r4, r5, r6, pc}
 8000c26:	4628      	mov	r0, r5
 8000c28:	4621      	mov	r1, r4
 8000c2a:	beab      	bkpt	0x00ab
 8000c2c:	4604      	mov	r4, r0
 8000c2e:	2c01      	cmp	r4, #1
 8000c30:	d0f7      	beq.n	8000c22 <_isatty+0x12>
 8000c32:	f000 fa3b 	bl	80010ac <__errno>
 8000c36:	2400      	movs	r4, #0
 8000c38:	4605      	mov	r5, r0
 8000c3a:	2613      	movs	r6, #19
 8000c3c:	4630      	mov	r0, r6
 8000c3e:	4621      	mov	r1, r4
 8000c40:	beab      	bkpt	0x00ab
 8000c42:	4606      	mov	r6, r0
 8000c44:	602e      	str	r6, [r5, #0]
 8000c46:	e7ec      	b.n	8000c22 <_isatty+0x12>

08000c48 <std>:
 8000c48:	2300      	movs	r3, #0
 8000c4a:	b510      	push	{r4, lr}
 8000c4c:	4604      	mov	r4, r0
 8000c4e:	e9c0 3300 	strd	r3, r3, [r0]
 8000c52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000c56:	6083      	str	r3, [r0, #8]
 8000c58:	8181      	strh	r1, [r0, #12]
 8000c5a:	6643      	str	r3, [r0, #100]	; 0x64
 8000c5c:	81c2      	strh	r2, [r0, #14]
 8000c5e:	6183      	str	r3, [r0, #24]
 8000c60:	4619      	mov	r1, r3
 8000c62:	2208      	movs	r2, #8
 8000c64:	305c      	adds	r0, #92	; 0x5c
 8000c66:	f000 f9d3 	bl	8001010 <memset>
 8000c6a:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <std+0x38>)
 8000c6c:	6263      	str	r3, [r4, #36]	; 0x24
 8000c6e:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <std+0x3c>)
 8000c70:	62a3      	str	r3, [r4, #40]	; 0x28
 8000c72:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <std+0x40>)
 8000c74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <std+0x44>)
 8000c78:	6224      	str	r4, [r4, #32]
 8000c7a:	6323      	str	r3, [r4, #48]	; 0x30
 8000c7c:	bd10      	pop	{r4, pc}
 8000c7e:	bf00      	nop
 8000c80:	08000e61 	.word	0x08000e61
 8000c84:	08000e83 	.word	0x08000e83
 8000c88:	08000ebb 	.word	0x08000ebb
 8000c8c:	08000edf 	.word	0x08000edf

08000c90 <stdio_exit_handler>:
 8000c90:	4a02      	ldr	r2, [pc, #8]	; (8000c9c <stdio_exit_handler+0xc>)
 8000c92:	4903      	ldr	r1, [pc, #12]	; (8000ca0 <stdio_exit_handler+0x10>)
 8000c94:	4803      	ldr	r0, [pc, #12]	; (8000ca4 <stdio_exit_handler+0x14>)
 8000c96:	f000 b869 	b.w	8000d6c <_fwalk_sglue>
 8000c9a:	bf00      	nop
 8000c9c:	2000000c 	.word	0x2000000c
 8000ca0:	08001401 	.word	0x08001401
 8000ca4:	20000018 	.word	0x20000018

08000ca8 <cleanup_stdio>:
 8000ca8:	6841      	ldr	r1, [r0, #4]
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <cleanup_stdio+0x34>)
 8000cac:	4299      	cmp	r1, r3
 8000cae:	b510      	push	{r4, lr}
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	d001      	beq.n	8000cb8 <cleanup_stdio+0x10>
 8000cb4:	f000 fba4 	bl	8001400 <_fflush_r>
 8000cb8:	68a1      	ldr	r1, [r4, #8]
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <cleanup_stdio+0x38>)
 8000cbc:	4299      	cmp	r1, r3
 8000cbe:	d002      	beq.n	8000cc6 <cleanup_stdio+0x1e>
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	f000 fb9d 	bl	8001400 <_fflush_r>
 8000cc6:	68e1      	ldr	r1, [r4, #12]
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <cleanup_stdio+0x3c>)
 8000cca:	4299      	cmp	r1, r3
 8000ccc:	d004      	beq.n	8000cd8 <cleanup_stdio+0x30>
 8000cce:	4620      	mov	r0, r4
 8000cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000cd4:	f000 bb94 	b.w	8001400 <_fflush_r>
 8000cd8:	bd10      	pop	{r4, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000140 	.word	0x20000140
 8000ce0:	200001a8 	.word	0x200001a8
 8000ce4:	20000210 	.word	0x20000210

08000ce8 <global_stdio_init.part.0>:
 8000ce8:	b510      	push	{r4, lr}
 8000cea:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <global_stdio_init.part.0+0x30>)
 8000cec:	4c0b      	ldr	r4, [pc, #44]	; (8000d1c <global_stdio_init.part.0+0x34>)
 8000cee:	4a0c      	ldr	r2, [pc, #48]	; (8000d20 <global_stdio_init.part.0+0x38>)
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	4620      	mov	r0, r4
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2104      	movs	r1, #4
 8000cf8:	f7ff ffa6 	bl	8000c48 <std>
 8000cfc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000d00:	2201      	movs	r2, #1
 8000d02:	2109      	movs	r1, #9
 8000d04:	f7ff ffa0 	bl	8000c48 <std>
 8000d08:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000d0c:	2202      	movs	r2, #2
 8000d0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d12:	2112      	movs	r1, #18
 8000d14:	f7ff bf98 	b.w	8000c48 <std>
 8000d18:	20000278 	.word	0x20000278
 8000d1c:	20000140 	.word	0x20000140
 8000d20:	08000c91 	.word	0x08000c91

08000d24 <__sfp_lock_acquire>:
 8000d24:	4801      	ldr	r0, [pc, #4]	; (8000d2c <__sfp_lock_acquire+0x8>)
 8000d26:	f000 b9eb 	b.w	8001100 <__retarget_lock_acquire_recursive>
 8000d2a:	bf00      	nop
 8000d2c:	20000281 	.word	0x20000281

08000d30 <__sfp_lock_release>:
 8000d30:	4801      	ldr	r0, [pc, #4]	; (8000d38 <__sfp_lock_release+0x8>)
 8000d32:	f000 b9e6 	b.w	8001102 <__retarget_lock_release_recursive>
 8000d36:	bf00      	nop
 8000d38:	20000281 	.word	0x20000281

08000d3c <__sinit>:
 8000d3c:	b510      	push	{r4, lr}
 8000d3e:	4604      	mov	r4, r0
 8000d40:	f7ff fff0 	bl	8000d24 <__sfp_lock_acquire>
 8000d44:	6a23      	ldr	r3, [r4, #32]
 8000d46:	b11b      	cbz	r3, 8000d50 <__sinit+0x14>
 8000d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d4c:	f7ff bff0 	b.w	8000d30 <__sfp_lock_release>
 8000d50:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <__sinit+0x28>)
 8000d52:	6223      	str	r3, [r4, #32]
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <__sinit+0x2c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d1f5      	bne.n	8000d48 <__sinit+0xc>
 8000d5c:	f7ff ffc4 	bl	8000ce8 <global_stdio_init.part.0>
 8000d60:	e7f2      	b.n	8000d48 <__sinit+0xc>
 8000d62:	bf00      	nop
 8000d64:	08000ca9 	.word	0x08000ca9
 8000d68:	20000278 	.word	0x20000278

08000d6c <_fwalk_sglue>:
 8000d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d70:	4607      	mov	r7, r0
 8000d72:	4688      	mov	r8, r1
 8000d74:	4614      	mov	r4, r2
 8000d76:	2600      	movs	r6, #0
 8000d78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000d7c:	f1b9 0901 	subs.w	r9, r9, #1
 8000d80:	d505      	bpl.n	8000d8e <_fwalk_sglue+0x22>
 8000d82:	6824      	ldr	r4, [r4, #0]
 8000d84:	2c00      	cmp	r4, #0
 8000d86:	d1f7      	bne.n	8000d78 <_fwalk_sglue+0xc>
 8000d88:	4630      	mov	r0, r6
 8000d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d8e:	89ab      	ldrh	r3, [r5, #12]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d907      	bls.n	8000da4 <_fwalk_sglue+0x38>
 8000d94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	d003      	beq.n	8000da4 <_fwalk_sglue+0x38>
 8000d9c:	4629      	mov	r1, r5
 8000d9e:	4638      	mov	r0, r7
 8000da0:	47c0      	blx	r8
 8000da2:	4306      	orrs	r6, r0
 8000da4:	3568      	adds	r5, #104	; 0x68
 8000da6:	e7e9      	b.n	8000d7c <_fwalk_sglue+0x10>

08000da8 <_puts_r>:
 8000da8:	6a03      	ldr	r3, [r0, #32]
 8000daa:	b570      	push	{r4, r5, r6, lr}
 8000dac:	6884      	ldr	r4, [r0, #8]
 8000dae:	4605      	mov	r5, r0
 8000db0:	460e      	mov	r6, r1
 8000db2:	b90b      	cbnz	r3, 8000db8 <_puts_r+0x10>
 8000db4:	f7ff ffc2 	bl	8000d3c <__sinit>
 8000db8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000dba:	07db      	lsls	r3, r3, #31
 8000dbc:	d405      	bmi.n	8000dca <_puts_r+0x22>
 8000dbe:	89a3      	ldrh	r3, [r4, #12]
 8000dc0:	0598      	lsls	r0, r3, #22
 8000dc2:	d402      	bmi.n	8000dca <_puts_r+0x22>
 8000dc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000dc6:	f000 f99b 	bl	8001100 <__retarget_lock_acquire_recursive>
 8000dca:	89a3      	ldrh	r3, [r4, #12]
 8000dcc:	0719      	lsls	r1, r3, #28
 8000dce:	d513      	bpl.n	8000df8 <_puts_r+0x50>
 8000dd0:	6923      	ldr	r3, [r4, #16]
 8000dd2:	b18b      	cbz	r3, 8000df8 <_puts_r+0x50>
 8000dd4:	3e01      	subs	r6, #1
 8000dd6:	68a3      	ldr	r3, [r4, #8]
 8000dd8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000ddc:	3b01      	subs	r3, #1
 8000dde:	60a3      	str	r3, [r4, #8]
 8000de0:	b9e9      	cbnz	r1, 8000e1e <_puts_r+0x76>
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	da2e      	bge.n	8000e44 <_puts_r+0x9c>
 8000de6:	4622      	mov	r2, r4
 8000de8:	210a      	movs	r1, #10
 8000dea:	4628      	mov	r0, r5
 8000dec:	f000 f87b 	bl	8000ee6 <__swbuf_r>
 8000df0:	3001      	adds	r0, #1
 8000df2:	d007      	beq.n	8000e04 <_puts_r+0x5c>
 8000df4:	250a      	movs	r5, #10
 8000df6:	e007      	b.n	8000e08 <_puts_r+0x60>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	4628      	mov	r0, r5
 8000dfc:	f000 f8b0 	bl	8000f60 <__swsetup_r>
 8000e00:	2800      	cmp	r0, #0
 8000e02:	d0e7      	beq.n	8000dd4 <_puts_r+0x2c>
 8000e04:	f04f 35ff 	mov.w	r5, #4294967295
 8000e08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000e0a:	07da      	lsls	r2, r3, #31
 8000e0c:	d405      	bmi.n	8000e1a <_puts_r+0x72>
 8000e0e:	89a3      	ldrh	r3, [r4, #12]
 8000e10:	059b      	lsls	r3, r3, #22
 8000e12:	d402      	bmi.n	8000e1a <_puts_r+0x72>
 8000e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000e16:	f000 f974 	bl	8001102 <__retarget_lock_release_recursive>
 8000e1a:	4628      	mov	r0, r5
 8000e1c:	bd70      	pop	{r4, r5, r6, pc}
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	da04      	bge.n	8000e2c <_puts_r+0x84>
 8000e22:	69a2      	ldr	r2, [r4, #24]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	dc06      	bgt.n	8000e36 <_puts_r+0x8e>
 8000e28:	290a      	cmp	r1, #10
 8000e2a:	d004      	beq.n	8000e36 <_puts_r+0x8e>
 8000e2c:	6823      	ldr	r3, [r4, #0]
 8000e2e:	1c5a      	adds	r2, r3, #1
 8000e30:	6022      	str	r2, [r4, #0]
 8000e32:	7019      	strb	r1, [r3, #0]
 8000e34:	e7cf      	b.n	8000dd6 <_puts_r+0x2e>
 8000e36:	4622      	mov	r2, r4
 8000e38:	4628      	mov	r0, r5
 8000e3a:	f000 f854 	bl	8000ee6 <__swbuf_r>
 8000e3e:	3001      	adds	r0, #1
 8000e40:	d1c9      	bne.n	8000dd6 <_puts_r+0x2e>
 8000e42:	e7df      	b.n	8000e04 <_puts_r+0x5c>
 8000e44:	6823      	ldr	r3, [r4, #0]
 8000e46:	250a      	movs	r5, #10
 8000e48:	1c5a      	adds	r2, r3, #1
 8000e4a:	6022      	str	r2, [r4, #0]
 8000e4c:	701d      	strb	r5, [r3, #0]
 8000e4e:	e7db      	b.n	8000e08 <_puts_r+0x60>

08000e50 <puts>:
 8000e50:	4b02      	ldr	r3, [pc, #8]	; (8000e5c <puts+0xc>)
 8000e52:	4601      	mov	r1, r0
 8000e54:	6818      	ldr	r0, [r3, #0]
 8000e56:	f7ff bfa7 	b.w	8000da8 <_puts_r>
 8000e5a:	bf00      	nop
 8000e5c:	20000064 	.word	0x20000064

08000e60 <__sread>:
 8000e60:	b510      	push	{r4, lr}
 8000e62:	460c      	mov	r4, r1
 8000e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e68:	f000 f8fc 	bl	8001064 <_read_r>
 8000e6c:	2800      	cmp	r0, #0
 8000e6e:	bfab      	itete	ge
 8000e70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000e72:	89a3      	ldrhlt	r3, [r4, #12]
 8000e74:	181b      	addge	r3, r3, r0
 8000e76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000e7a:	bfac      	ite	ge
 8000e7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8000e7e:	81a3      	strhlt	r3, [r4, #12]
 8000e80:	bd10      	pop	{r4, pc}

08000e82 <__swrite>:
 8000e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e86:	461f      	mov	r7, r3
 8000e88:	898b      	ldrh	r3, [r1, #12]
 8000e8a:	05db      	lsls	r3, r3, #23
 8000e8c:	4605      	mov	r5, r0
 8000e8e:	460c      	mov	r4, r1
 8000e90:	4616      	mov	r6, r2
 8000e92:	d505      	bpl.n	8000ea0 <__swrite+0x1e>
 8000e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e98:	2302      	movs	r3, #2
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f000 f8d0 	bl	8001040 <_lseek_r>
 8000ea0:	89a3      	ldrh	r3, [r4, #12]
 8000ea2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ea6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000eaa:	81a3      	strh	r3, [r4, #12]
 8000eac:	4632      	mov	r2, r6
 8000eae:	463b      	mov	r3, r7
 8000eb0:	4628      	mov	r0, r5
 8000eb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000eb6:	f000 b8e7 	b.w	8001088 <_write_r>

08000eba <__sseek>:
 8000eba:	b510      	push	{r4, lr}
 8000ebc:	460c      	mov	r4, r1
 8000ebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ec2:	f000 f8bd 	bl	8001040 <_lseek_r>
 8000ec6:	1c43      	adds	r3, r0, #1
 8000ec8:	89a3      	ldrh	r3, [r4, #12]
 8000eca:	bf15      	itete	ne
 8000ecc:	6560      	strne	r0, [r4, #84]	; 0x54
 8000ece:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000ed2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000ed6:	81a3      	strheq	r3, [r4, #12]
 8000ed8:	bf18      	it	ne
 8000eda:	81a3      	strhne	r3, [r4, #12]
 8000edc:	bd10      	pop	{r4, pc}

08000ede <__sclose>:
 8000ede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ee2:	f000 b89d 	b.w	8001020 <_close_r>

08000ee6 <__swbuf_r>:
 8000ee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ee8:	460e      	mov	r6, r1
 8000eea:	4614      	mov	r4, r2
 8000eec:	4605      	mov	r5, r0
 8000eee:	b118      	cbz	r0, 8000ef8 <__swbuf_r+0x12>
 8000ef0:	6a03      	ldr	r3, [r0, #32]
 8000ef2:	b90b      	cbnz	r3, 8000ef8 <__swbuf_r+0x12>
 8000ef4:	f7ff ff22 	bl	8000d3c <__sinit>
 8000ef8:	69a3      	ldr	r3, [r4, #24]
 8000efa:	60a3      	str	r3, [r4, #8]
 8000efc:	89a3      	ldrh	r3, [r4, #12]
 8000efe:	071a      	lsls	r2, r3, #28
 8000f00:	d525      	bpl.n	8000f4e <__swbuf_r+0x68>
 8000f02:	6923      	ldr	r3, [r4, #16]
 8000f04:	b31b      	cbz	r3, 8000f4e <__swbuf_r+0x68>
 8000f06:	6823      	ldr	r3, [r4, #0]
 8000f08:	6922      	ldr	r2, [r4, #16]
 8000f0a:	1a98      	subs	r0, r3, r2
 8000f0c:	6963      	ldr	r3, [r4, #20]
 8000f0e:	b2f6      	uxtb	r6, r6
 8000f10:	4283      	cmp	r3, r0
 8000f12:	4637      	mov	r7, r6
 8000f14:	dc04      	bgt.n	8000f20 <__swbuf_r+0x3a>
 8000f16:	4621      	mov	r1, r4
 8000f18:	4628      	mov	r0, r5
 8000f1a:	f000 fa71 	bl	8001400 <_fflush_r>
 8000f1e:	b9e0      	cbnz	r0, 8000f5a <__swbuf_r+0x74>
 8000f20:	68a3      	ldr	r3, [r4, #8]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	60a3      	str	r3, [r4, #8]
 8000f26:	6823      	ldr	r3, [r4, #0]
 8000f28:	1c5a      	adds	r2, r3, #1
 8000f2a:	6022      	str	r2, [r4, #0]
 8000f2c:	701e      	strb	r6, [r3, #0]
 8000f2e:	6962      	ldr	r2, [r4, #20]
 8000f30:	1c43      	adds	r3, r0, #1
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d004      	beq.n	8000f40 <__swbuf_r+0x5a>
 8000f36:	89a3      	ldrh	r3, [r4, #12]
 8000f38:	07db      	lsls	r3, r3, #31
 8000f3a:	d506      	bpl.n	8000f4a <__swbuf_r+0x64>
 8000f3c:	2e0a      	cmp	r6, #10
 8000f3e:	d104      	bne.n	8000f4a <__swbuf_r+0x64>
 8000f40:	4621      	mov	r1, r4
 8000f42:	4628      	mov	r0, r5
 8000f44:	f000 fa5c 	bl	8001400 <_fflush_r>
 8000f48:	b938      	cbnz	r0, 8000f5a <__swbuf_r+0x74>
 8000f4a:	4638      	mov	r0, r7
 8000f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f4e:	4621      	mov	r1, r4
 8000f50:	4628      	mov	r0, r5
 8000f52:	f000 f805 	bl	8000f60 <__swsetup_r>
 8000f56:	2800      	cmp	r0, #0
 8000f58:	d0d5      	beq.n	8000f06 <__swbuf_r+0x20>
 8000f5a:	f04f 37ff 	mov.w	r7, #4294967295
 8000f5e:	e7f4      	b.n	8000f4a <__swbuf_r+0x64>

08000f60 <__swsetup_r>:
 8000f60:	b538      	push	{r3, r4, r5, lr}
 8000f62:	4b2a      	ldr	r3, [pc, #168]	; (800100c <__swsetup_r+0xac>)
 8000f64:	4605      	mov	r5, r0
 8000f66:	6818      	ldr	r0, [r3, #0]
 8000f68:	460c      	mov	r4, r1
 8000f6a:	b118      	cbz	r0, 8000f74 <__swsetup_r+0x14>
 8000f6c:	6a03      	ldr	r3, [r0, #32]
 8000f6e:	b90b      	cbnz	r3, 8000f74 <__swsetup_r+0x14>
 8000f70:	f7ff fee4 	bl	8000d3c <__sinit>
 8000f74:	89a3      	ldrh	r3, [r4, #12]
 8000f76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000f7a:	0718      	lsls	r0, r3, #28
 8000f7c:	d422      	bmi.n	8000fc4 <__swsetup_r+0x64>
 8000f7e:	06d9      	lsls	r1, r3, #27
 8000f80:	d407      	bmi.n	8000f92 <__swsetup_r+0x32>
 8000f82:	2309      	movs	r3, #9
 8000f84:	602b      	str	r3, [r5, #0]
 8000f86:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000f8a:	81a3      	strh	r3, [r4, #12]
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f90:	e034      	b.n	8000ffc <__swsetup_r+0x9c>
 8000f92:	0758      	lsls	r0, r3, #29
 8000f94:	d512      	bpl.n	8000fbc <__swsetup_r+0x5c>
 8000f96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000f98:	b141      	cbz	r1, 8000fac <__swsetup_r+0x4c>
 8000f9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000f9e:	4299      	cmp	r1, r3
 8000fa0:	d002      	beq.n	8000fa8 <__swsetup_r+0x48>
 8000fa2:	4628      	mov	r0, r5
 8000fa4:	f000 f8ae 	bl	8001104 <_free_r>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	6363      	str	r3, [r4, #52]	; 0x34
 8000fac:	89a3      	ldrh	r3, [r4, #12]
 8000fae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000fb2:	81a3      	strh	r3, [r4, #12]
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	6063      	str	r3, [r4, #4]
 8000fb8:	6923      	ldr	r3, [r4, #16]
 8000fba:	6023      	str	r3, [r4, #0]
 8000fbc:	89a3      	ldrh	r3, [r4, #12]
 8000fbe:	f043 0308 	orr.w	r3, r3, #8
 8000fc2:	81a3      	strh	r3, [r4, #12]
 8000fc4:	6923      	ldr	r3, [r4, #16]
 8000fc6:	b94b      	cbnz	r3, 8000fdc <__swsetup_r+0x7c>
 8000fc8:	89a3      	ldrh	r3, [r4, #12]
 8000fca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000fce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fd2:	d003      	beq.n	8000fdc <__swsetup_r+0x7c>
 8000fd4:	4621      	mov	r1, r4
 8000fd6:	4628      	mov	r0, r5
 8000fd8:	f000 fa60 	bl	800149c <__smakebuf_r>
 8000fdc:	89a0      	ldrh	r0, [r4, #12]
 8000fde:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000fe2:	f010 0301 	ands.w	r3, r0, #1
 8000fe6:	d00a      	beq.n	8000ffe <__swsetup_r+0x9e>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60a3      	str	r3, [r4, #8]
 8000fec:	6963      	ldr	r3, [r4, #20]
 8000fee:	425b      	negs	r3, r3
 8000ff0:	61a3      	str	r3, [r4, #24]
 8000ff2:	6923      	ldr	r3, [r4, #16]
 8000ff4:	b943      	cbnz	r3, 8001008 <__swsetup_r+0xa8>
 8000ff6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000ffa:	d1c4      	bne.n	8000f86 <__swsetup_r+0x26>
 8000ffc:	bd38      	pop	{r3, r4, r5, pc}
 8000ffe:	0781      	lsls	r1, r0, #30
 8001000:	bf58      	it	pl
 8001002:	6963      	ldrpl	r3, [r4, #20]
 8001004:	60a3      	str	r3, [r4, #8]
 8001006:	e7f4      	b.n	8000ff2 <__swsetup_r+0x92>
 8001008:	2000      	movs	r0, #0
 800100a:	e7f7      	b.n	8000ffc <__swsetup_r+0x9c>
 800100c:	20000064 	.word	0x20000064

08001010 <memset>:
 8001010:	4402      	add	r2, r0
 8001012:	4603      	mov	r3, r0
 8001014:	4293      	cmp	r3, r2
 8001016:	d100      	bne.n	800101a <memset+0xa>
 8001018:	4770      	bx	lr
 800101a:	f803 1b01 	strb.w	r1, [r3], #1
 800101e:	e7f9      	b.n	8001014 <memset+0x4>

08001020 <_close_r>:
 8001020:	b538      	push	{r3, r4, r5, lr}
 8001022:	4d06      	ldr	r5, [pc, #24]	; (800103c <_close_r+0x1c>)
 8001024:	2300      	movs	r3, #0
 8001026:	4604      	mov	r4, r0
 8001028:	4608      	mov	r0, r1
 800102a:	602b      	str	r3, [r5, #0]
 800102c:	f7ff fc1e 	bl	800086c <_close>
 8001030:	1c43      	adds	r3, r0, #1
 8001032:	d102      	bne.n	800103a <_close_r+0x1a>
 8001034:	682b      	ldr	r3, [r5, #0]
 8001036:	b103      	cbz	r3, 800103a <_close_r+0x1a>
 8001038:	6023      	str	r3, [r4, #0]
 800103a:	bd38      	pop	{r3, r4, r5, pc}
 800103c:	2000027c 	.word	0x2000027c

08001040 <_lseek_r>:
 8001040:	b538      	push	{r3, r4, r5, lr}
 8001042:	4d07      	ldr	r5, [pc, #28]	; (8001060 <_lseek_r+0x20>)
 8001044:	4604      	mov	r4, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4611      	mov	r1, r2
 800104a:	2200      	movs	r2, #0
 800104c:	602a      	str	r2, [r5, #0]
 800104e:	461a      	mov	r2, r3
 8001050:	f7ff fbc9 	bl	80007e6 <_lseek>
 8001054:	1c43      	adds	r3, r0, #1
 8001056:	d102      	bne.n	800105e <_lseek_r+0x1e>
 8001058:	682b      	ldr	r3, [r5, #0]
 800105a:	b103      	cbz	r3, 800105e <_lseek_r+0x1e>
 800105c:	6023      	str	r3, [r4, #0]
 800105e:	bd38      	pop	{r3, r4, r5, pc}
 8001060:	2000027c 	.word	0x2000027c

08001064 <_read_r>:
 8001064:	b538      	push	{r3, r4, r5, lr}
 8001066:	4d07      	ldr	r5, [pc, #28]	; (8001084 <_read_r+0x20>)
 8001068:	4604      	mov	r4, r0
 800106a:	4608      	mov	r0, r1
 800106c:	4611      	mov	r1, r2
 800106e:	2200      	movs	r2, #0
 8001070:	602a      	str	r2, [r5, #0]
 8001072:	461a      	mov	r2, r3
 8001074:	f7ff fb5f 	bl	8000736 <_read>
 8001078:	1c43      	adds	r3, r0, #1
 800107a:	d102      	bne.n	8001082 <_read_r+0x1e>
 800107c:	682b      	ldr	r3, [r5, #0]
 800107e:	b103      	cbz	r3, 8001082 <_read_r+0x1e>
 8001080:	6023      	str	r3, [r4, #0]
 8001082:	bd38      	pop	{r3, r4, r5, pc}
 8001084:	2000027c 	.word	0x2000027c

08001088 <_write_r>:
 8001088:	b538      	push	{r3, r4, r5, lr}
 800108a:	4d07      	ldr	r5, [pc, #28]	; (80010a8 <_write_r+0x20>)
 800108c:	4604      	mov	r4, r0
 800108e:	4608      	mov	r0, r1
 8001090:	4611      	mov	r1, r2
 8001092:	2200      	movs	r2, #0
 8001094:	602a      	str	r2, [r5, #0]
 8001096:	461a      	mov	r2, r3
 8001098:	f7ff fbb7 	bl	800080a <_write>
 800109c:	1c43      	adds	r3, r0, #1
 800109e:	d102      	bne.n	80010a6 <_write_r+0x1e>
 80010a0:	682b      	ldr	r3, [r5, #0]
 80010a2:	b103      	cbz	r3, 80010a6 <_write_r+0x1e>
 80010a4:	6023      	str	r3, [r4, #0]
 80010a6:	bd38      	pop	{r3, r4, r5, pc}
 80010a8:	2000027c 	.word	0x2000027c

080010ac <__errno>:
 80010ac:	4b01      	ldr	r3, [pc, #4]	; (80010b4 <__errno+0x8>)
 80010ae:	6818      	ldr	r0, [r3, #0]
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	20000064 	.word	0x20000064

080010b8 <__libc_init_array>:
 80010b8:	b570      	push	{r4, r5, r6, lr}
 80010ba:	4d0d      	ldr	r5, [pc, #52]	; (80010f0 <__libc_init_array+0x38>)
 80010bc:	4c0d      	ldr	r4, [pc, #52]	; (80010f4 <__libc_init_array+0x3c>)
 80010be:	1b64      	subs	r4, r4, r5
 80010c0:	10a4      	asrs	r4, r4, #2
 80010c2:	2600      	movs	r6, #0
 80010c4:	42a6      	cmp	r6, r4
 80010c6:	d109      	bne.n	80010dc <__libc_init_array+0x24>
 80010c8:	4d0b      	ldr	r5, [pc, #44]	; (80010f8 <__libc_init_array+0x40>)
 80010ca:	4c0c      	ldr	r4, [pc, #48]	; (80010fc <__libc_init_array+0x44>)
 80010cc:	f000 fa54 	bl	8001578 <_init>
 80010d0:	1b64      	subs	r4, r4, r5
 80010d2:	10a4      	asrs	r4, r4, #2
 80010d4:	2600      	movs	r6, #0
 80010d6:	42a6      	cmp	r6, r4
 80010d8:	d105      	bne.n	80010e6 <__libc_init_array+0x2e>
 80010da:	bd70      	pop	{r4, r5, r6, pc}
 80010dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80010e0:	4798      	blx	r3
 80010e2:	3601      	adds	r6, #1
 80010e4:	e7ee      	b.n	80010c4 <__libc_init_array+0xc>
 80010e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80010ea:	4798      	blx	r3
 80010ec:	3601      	adds	r6, #1
 80010ee:	e7f2      	b.n	80010d6 <__libc_init_array+0x1e>
 80010f0:	080015b8 	.word	0x080015b8
 80010f4:	080015b8 	.word	0x080015b8
 80010f8:	080015b8 	.word	0x080015b8
 80010fc:	080015bc 	.word	0x080015bc

08001100 <__retarget_lock_acquire_recursive>:
 8001100:	4770      	bx	lr

08001102 <__retarget_lock_release_recursive>:
 8001102:	4770      	bx	lr

08001104 <_free_r>:
 8001104:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001106:	2900      	cmp	r1, #0
 8001108:	d044      	beq.n	8001194 <_free_r+0x90>
 800110a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800110e:	9001      	str	r0, [sp, #4]
 8001110:	2b00      	cmp	r3, #0
 8001112:	f1a1 0404 	sub.w	r4, r1, #4
 8001116:	bfb8      	it	lt
 8001118:	18e4      	addlt	r4, r4, r3
 800111a:	f000 f8df 	bl	80012dc <__malloc_lock>
 800111e:	4a1e      	ldr	r2, [pc, #120]	; (8001198 <_free_r+0x94>)
 8001120:	9801      	ldr	r0, [sp, #4]
 8001122:	6813      	ldr	r3, [r2, #0]
 8001124:	b933      	cbnz	r3, 8001134 <_free_r+0x30>
 8001126:	6063      	str	r3, [r4, #4]
 8001128:	6014      	str	r4, [r2, #0]
 800112a:	b003      	add	sp, #12
 800112c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001130:	f000 b8da 	b.w	80012e8 <__malloc_unlock>
 8001134:	42a3      	cmp	r3, r4
 8001136:	d908      	bls.n	800114a <_free_r+0x46>
 8001138:	6825      	ldr	r5, [r4, #0]
 800113a:	1961      	adds	r1, r4, r5
 800113c:	428b      	cmp	r3, r1
 800113e:	bf01      	itttt	eq
 8001140:	6819      	ldreq	r1, [r3, #0]
 8001142:	685b      	ldreq	r3, [r3, #4]
 8001144:	1949      	addeq	r1, r1, r5
 8001146:	6021      	streq	r1, [r4, #0]
 8001148:	e7ed      	b.n	8001126 <_free_r+0x22>
 800114a:	461a      	mov	r2, r3
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	b10b      	cbz	r3, 8001154 <_free_r+0x50>
 8001150:	42a3      	cmp	r3, r4
 8001152:	d9fa      	bls.n	800114a <_free_r+0x46>
 8001154:	6811      	ldr	r1, [r2, #0]
 8001156:	1855      	adds	r5, r2, r1
 8001158:	42a5      	cmp	r5, r4
 800115a:	d10b      	bne.n	8001174 <_free_r+0x70>
 800115c:	6824      	ldr	r4, [r4, #0]
 800115e:	4421      	add	r1, r4
 8001160:	1854      	adds	r4, r2, r1
 8001162:	42a3      	cmp	r3, r4
 8001164:	6011      	str	r1, [r2, #0]
 8001166:	d1e0      	bne.n	800112a <_free_r+0x26>
 8001168:	681c      	ldr	r4, [r3, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	6053      	str	r3, [r2, #4]
 800116e:	440c      	add	r4, r1
 8001170:	6014      	str	r4, [r2, #0]
 8001172:	e7da      	b.n	800112a <_free_r+0x26>
 8001174:	d902      	bls.n	800117c <_free_r+0x78>
 8001176:	230c      	movs	r3, #12
 8001178:	6003      	str	r3, [r0, #0]
 800117a:	e7d6      	b.n	800112a <_free_r+0x26>
 800117c:	6825      	ldr	r5, [r4, #0]
 800117e:	1961      	adds	r1, r4, r5
 8001180:	428b      	cmp	r3, r1
 8001182:	bf04      	itt	eq
 8001184:	6819      	ldreq	r1, [r3, #0]
 8001186:	685b      	ldreq	r3, [r3, #4]
 8001188:	6063      	str	r3, [r4, #4]
 800118a:	bf04      	itt	eq
 800118c:	1949      	addeq	r1, r1, r5
 800118e:	6021      	streq	r1, [r4, #0]
 8001190:	6054      	str	r4, [r2, #4]
 8001192:	e7ca      	b.n	800112a <_free_r+0x26>
 8001194:	b003      	add	sp, #12
 8001196:	bd30      	pop	{r4, r5, pc}
 8001198:	20000284 	.word	0x20000284

0800119c <sbrk_aligned>:
 800119c:	b570      	push	{r4, r5, r6, lr}
 800119e:	4e0e      	ldr	r6, [pc, #56]	; (80011d8 <sbrk_aligned+0x3c>)
 80011a0:	460c      	mov	r4, r1
 80011a2:	6831      	ldr	r1, [r6, #0]
 80011a4:	4605      	mov	r5, r0
 80011a6:	b911      	cbnz	r1, 80011ae <sbrk_aligned+0x12>
 80011a8:	f000 f9d6 	bl	8001558 <_sbrk_r>
 80011ac:	6030      	str	r0, [r6, #0]
 80011ae:	4621      	mov	r1, r4
 80011b0:	4628      	mov	r0, r5
 80011b2:	f000 f9d1 	bl	8001558 <_sbrk_r>
 80011b6:	1c43      	adds	r3, r0, #1
 80011b8:	d00a      	beq.n	80011d0 <sbrk_aligned+0x34>
 80011ba:	1cc4      	adds	r4, r0, #3
 80011bc:	f024 0403 	bic.w	r4, r4, #3
 80011c0:	42a0      	cmp	r0, r4
 80011c2:	d007      	beq.n	80011d4 <sbrk_aligned+0x38>
 80011c4:	1a21      	subs	r1, r4, r0
 80011c6:	4628      	mov	r0, r5
 80011c8:	f000 f9c6 	bl	8001558 <_sbrk_r>
 80011cc:	3001      	adds	r0, #1
 80011ce:	d101      	bne.n	80011d4 <sbrk_aligned+0x38>
 80011d0:	f04f 34ff 	mov.w	r4, #4294967295
 80011d4:	4620      	mov	r0, r4
 80011d6:	bd70      	pop	{r4, r5, r6, pc}
 80011d8:	20000288 	.word	0x20000288

080011dc <_malloc_r>:
 80011dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80011e0:	1ccd      	adds	r5, r1, #3
 80011e2:	f025 0503 	bic.w	r5, r5, #3
 80011e6:	3508      	adds	r5, #8
 80011e8:	2d0c      	cmp	r5, #12
 80011ea:	bf38      	it	cc
 80011ec:	250c      	movcc	r5, #12
 80011ee:	2d00      	cmp	r5, #0
 80011f0:	4607      	mov	r7, r0
 80011f2:	db01      	blt.n	80011f8 <_malloc_r+0x1c>
 80011f4:	42a9      	cmp	r1, r5
 80011f6:	d905      	bls.n	8001204 <_malloc_r+0x28>
 80011f8:	230c      	movs	r3, #12
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	2600      	movs	r6, #0
 80011fe:	4630      	mov	r0, r6
 8001200:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001204:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80012d8 <_malloc_r+0xfc>
 8001208:	f000 f868 	bl	80012dc <__malloc_lock>
 800120c:	f8d8 3000 	ldr.w	r3, [r8]
 8001210:	461c      	mov	r4, r3
 8001212:	bb5c      	cbnz	r4, 800126c <_malloc_r+0x90>
 8001214:	4629      	mov	r1, r5
 8001216:	4638      	mov	r0, r7
 8001218:	f7ff ffc0 	bl	800119c <sbrk_aligned>
 800121c:	1c43      	adds	r3, r0, #1
 800121e:	4604      	mov	r4, r0
 8001220:	d155      	bne.n	80012ce <_malloc_r+0xf2>
 8001222:	f8d8 4000 	ldr.w	r4, [r8]
 8001226:	4626      	mov	r6, r4
 8001228:	2e00      	cmp	r6, #0
 800122a:	d145      	bne.n	80012b8 <_malloc_r+0xdc>
 800122c:	2c00      	cmp	r4, #0
 800122e:	d048      	beq.n	80012c2 <_malloc_r+0xe6>
 8001230:	6823      	ldr	r3, [r4, #0]
 8001232:	4631      	mov	r1, r6
 8001234:	4638      	mov	r0, r7
 8001236:	eb04 0903 	add.w	r9, r4, r3
 800123a:	f000 f98d 	bl	8001558 <_sbrk_r>
 800123e:	4581      	cmp	r9, r0
 8001240:	d13f      	bne.n	80012c2 <_malloc_r+0xe6>
 8001242:	6821      	ldr	r1, [r4, #0]
 8001244:	1a6d      	subs	r5, r5, r1
 8001246:	4629      	mov	r1, r5
 8001248:	4638      	mov	r0, r7
 800124a:	f7ff ffa7 	bl	800119c <sbrk_aligned>
 800124e:	3001      	adds	r0, #1
 8001250:	d037      	beq.n	80012c2 <_malloc_r+0xe6>
 8001252:	6823      	ldr	r3, [r4, #0]
 8001254:	442b      	add	r3, r5
 8001256:	6023      	str	r3, [r4, #0]
 8001258:	f8d8 3000 	ldr.w	r3, [r8]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d038      	beq.n	80012d2 <_malloc_r+0xf6>
 8001260:	685a      	ldr	r2, [r3, #4]
 8001262:	42a2      	cmp	r2, r4
 8001264:	d12b      	bne.n	80012be <_malloc_r+0xe2>
 8001266:	2200      	movs	r2, #0
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	e00f      	b.n	800128c <_malloc_r+0xb0>
 800126c:	6822      	ldr	r2, [r4, #0]
 800126e:	1b52      	subs	r2, r2, r5
 8001270:	d41f      	bmi.n	80012b2 <_malloc_r+0xd6>
 8001272:	2a0b      	cmp	r2, #11
 8001274:	d917      	bls.n	80012a6 <_malloc_r+0xca>
 8001276:	1961      	adds	r1, r4, r5
 8001278:	42a3      	cmp	r3, r4
 800127a:	6025      	str	r5, [r4, #0]
 800127c:	bf18      	it	ne
 800127e:	6059      	strne	r1, [r3, #4]
 8001280:	6863      	ldr	r3, [r4, #4]
 8001282:	bf08      	it	eq
 8001284:	f8c8 1000 	streq.w	r1, [r8]
 8001288:	5162      	str	r2, [r4, r5]
 800128a:	604b      	str	r3, [r1, #4]
 800128c:	4638      	mov	r0, r7
 800128e:	f104 060b 	add.w	r6, r4, #11
 8001292:	f000 f829 	bl	80012e8 <__malloc_unlock>
 8001296:	f026 0607 	bic.w	r6, r6, #7
 800129a:	1d23      	adds	r3, r4, #4
 800129c:	1af2      	subs	r2, r6, r3
 800129e:	d0ae      	beq.n	80011fe <_malloc_r+0x22>
 80012a0:	1b9b      	subs	r3, r3, r6
 80012a2:	50a3      	str	r3, [r4, r2]
 80012a4:	e7ab      	b.n	80011fe <_malloc_r+0x22>
 80012a6:	42a3      	cmp	r3, r4
 80012a8:	6862      	ldr	r2, [r4, #4]
 80012aa:	d1dd      	bne.n	8001268 <_malloc_r+0x8c>
 80012ac:	f8c8 2000 	str.w	r2, [r8]
 80012b0:	e7ec      	b.n	800128c <_malloc_r+0xb0>
 80012b2:	4623      	mov	r3, r4
 80012b4:	6864      	ldr	r4, [r4, #4]
 80012b6:	e7ac      	b.n	8001212 <_malloc_r+0x36>
 80012b8:	4634      	mov	r4, r6
 80012ba:	6876      	ldr	r6, [r6, #4]
 80012bc:	e7b4      	b.n	8001228 <_malloc_r+0x4c>
 80012be:	4613      	mov	r3, r2
 80012c0:	e7cc      	b.n	800125c <_malloc_r+0x80>
 80012c2:	230c      	movs	r3, #12
 80012c4:	603b      	str	r3, [r7, #0]
 80012c6:	4638      	mov	r0, r7
 80012c8:	f000 f80e 	bl	80012e8 <__malloc_unlock>
 80012cc:	e797      	b.n	80011fe <_malloc_r+0x22>
 80012ce:	6025      	str	r5, [r4, #0]
 80012d0:	e7dc      	b.n	800128c <_malloc_r+0xb0>
 80012d2:	605b      	str	r3, [r3, #4]
 80012d4:	deff      	udf	#255	; 0xff
 80012d6:	bf00      	nop
 80012d8:	20000284 	.word	0x20000284

080012dc <__malloc_lock>:
 80012dc:	4801      	ldr	r0, [pc, #4]	; (80012e4 <__malloc_lock+0x8>)
 80012de:	f7ff bf0f 	b.w	8001100 <__retarget_lock_acquire_recursive>
 80012e2:	bf00      	nop
 80012e4:	20000280 	.word	0x20000280

080012e8 <__malloc_unlock>:
 80012e8:	4801      	ldr	r0, [pc, #4]	; (80012f0 <__malloc_unlock+0x8>)
 80012ea:	f7ff bf0a 	b.w	8001102 <__retarget_lock_release_recursive>
 80012ee:	bf00      	nop
 80012f0:	20000280 	.word	0x20000280

080012f4 <__sflush_r>:
 80012f4:	898a      	ldrh	r2, [r1, #12]
 80012f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012fa:	4605      	mov	r5, r0
 80012fc:	0710      	lsls	r0, r2, #28
 80012fe:	460c      	mov	r4, r1
 8001300:	d458      	bmi.n	80013b4 <__sflush_r+0xc0>
 8001302:	684b      	ldr	r3, [r1, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	dc05      	bgt.n	8001314 <__sflush_r+0x20>
 8001308:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800130a:	2b00      	cmp	r3, #0
 800130c:	dc02      	bgt.n	8001314 <__sflush_r+0x20>
 800130e:	2000      	movs	r0, #0
 8001310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001314:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001316:	2e00      	cmp	r6, #0
 8001318:	d0f9      	beq.n	800130e <__sflush_r+0x1a>
 800131a:	2300      	movs	r3, #0
 800131c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001320:	682f      	ldr	r7, [r5, #0]
 8001322:	6a21      	ldr	r1, [r4, #32]
 8001324:	602b      	str	r3, [r5, #0]
 8001326:	d032      	beq.n	800138e <__sflush_r+0x9a>
 8001328:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800132a:	89a3      	ldrh	r3, [r4, #12]
 800132c:	075a      	lsls	r2, r3, #29
 800132e:	d505      	bpl.n	800133c <__sflush_r+0x48>
 8001330:	6863      	ldr	r3, [r4, #4]
 8001332:	1ac0      	subs	r0, r0, r3
 8001334:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001336:	b10b      	cbz	r3, 800133c <__sflush_r+0x48>
 8001338:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800133a:	1ac0      	subs	r0, r0, r3
 800133c:	2300      	movs	r3, #0
 800133e:	4602      	mov	r2, r0
 8001340:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001342:	6a21      	ldr	r1, [r4, #32]
 8001344:	4628      	mov	r0, r5
 8001346:	47b0      	blx	r6
 8001348:	1c43      	adds	r3, r0, #1
 800134a:	89a3      	ldrh	r3, [r4, #12]
 800134c:	d106      	bne.n	800135c <__sflush_r+0x68>
 800134e:	6829      	ldr	r1, [r5, #0]
 8001350:	291d      	cmp	r1, #29
 8001352:	d82b      	bhi.n	80013ac <__sflush_r+0xb8>
 8001354:	4a29      	ldr	r2, [pc, #164]	; (80013fc <__sflush_r+0x108>)
 8001356:	410a      	asrs	r2, r1
 8001358:	07d6      	lsls	r6, r2, #31
 800135a:	d427      	bmi.n	80013ac <__sflush_r+0xb8>
 800135c:	2200      	movs	r2, #0
 800135e:	6062      	str	r2, [r4, #4]
 8001360:	04d9      	lsls	r1, r3, #19
 8001362:	6922      	ldr	r2, [r4, #16]
 8001364:	6022      	str	r2, [r4, #0]
 8001366:	d504      	bpl.n	8001372 <__sflush_r+0x7e>
 8001368:	1c42      	adds	r2, r0, #1
 800136a:	d101      	bne.n	8001370 <__sflush_r+0x7c>
 800136c:	682b      	ldr	r3, [r5, #0]
 800136e:	b903      	cbnz	r3, 8001372 <__sflush_r+0x7e>
 8001370:	6560      	str	r0, [r4, #84]	; 0x54
 8001372:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001374:	602f      	str	r7, [r5, #0]
 8001376:	2900      	cmp	r1, #0
 8001378:	d0c9      	beq.n	800130e <__sflush_r+0x1a>
 800137a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800137e:	4299      	cmp	r1, r3
 8001380:	d002      	beq.n	8001388 <__sflush_r+0x94>
 8001382:	4628      	mov	r0, r5
 8001384:	f7ff febe 	bl	8001104 <_free_r>
 8001388:	2000      	movs	r0, #0
 800138a:	6360      	str	r0, [r4, #52]	; 0x34
 800138c:	e7c0      	b.n	8001310 <__sflush_r+0x1c>
 800138e:	2301      	movs	r3, #1
 8001390:	4628      	mov	r0, r5
 8001392:	47b0      	blx	r6
 8001394:	1c41      	adds	r1, r0, #1
 8001396:	d1c8      	bne.n	800132a <__sflush_r+0x36>
 8001398:	682b      	ldr	r3, [r5, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d0c5      	beq.n	800132a <__sflush_r+0x36>
 800139e:	2b1d      	cmp	r3, #29
 80013a0:	d001      	beq.n	80013a6 <__sflush_r+0xb2>
 80013a2:	2b16      	cmp	r3, #22
 80013a4:	d101      	bne.n	80013aa <__sflush_r+0xb6>
 80013a6:	602f      	str	r7, [r5, #0]
 80013a8:	e7b1      	b.n	800130e <__sflush_r+0x1a>
 80013aa:	89a3      	ldrh	r3, [r4, #12]
 80013ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013b0:	81a3      	strh	r3, [r4, #12]
 80013b2:	e7ad      	b.n	8001310 <__sflush_r+0x1c>
 80013b4:	690f      	ldr	r7, [r1, #16]
 80013b6:	2f00      	cmp	r7, #0
 80013b8:	d0a9      	beq.n	800130e <__sflush_r+0x1a>
 80013ba:	0793      	lsls	r3, r2, #30
 80013bc:	680e      	ldr	r6, [r1, #0]
 80013be:	bf08      	it	eq
 80013c0:	694b      	ldreq	r3, [r1, #20]
 80013c2:	600f      	str	r7, [r1, #0]
 80013c4:	bf18      	it	ne
 80013c6:	2300      	movne	r3, #0
 80013c8:	eba6 0807 	sub.w	r8, r6, r7
 80013cc:	608b      	str	r3, [r1, #8]
 80013ce:	f1b8 0f00 	cmp.w	r8, #0
 80013d2:	dd9c      	ble.n	800130e <__sflush_r+0x1a>
 80013d4:	6a21      	ldr	r1, [r4, #32]
 80013d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80013d8:	4643      	mov	r3, r8
 80013da:	463a      	mov	r2, r7
 80013dc:	4628      	mov	r0, r5
 80013de:	47b0      	blx	r6
 80013e0:	2800      	cmp	r0, #0
 80013e2:	dc06      	bgt.n	80013f2 <__sflush_r+0xfe>
 80013e4:	89a3      	ldrh	r3, [r4, #12]
 80013e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013ea:	81a3      	strh	r3, [r4, #12]
 80013ec:	f04f 30ff 	mov.w	r0, #4294967295
 80013f0:	e78e      	b.n	8001310 <__sflush_r+0x1c>
 80013f2:	4407      	add	r7, r0
 80013f4:	eba8 0800 	sub.w	r8, r8, r0
 80013f8:	e7e9      	b.n	80013ce <__sflush_r+0xda>
 80013fa:	bf00      	nop
 80013fc:	dfbffffe 	.word	0xdfbffffe

08001400 <_fflush_r>:
 8001400:	b538      	push	{r3, r4, r5, lr}
 8001402:	690b      	ldr	r3, [r1, #16]
 8001404:	4605      	mov	r5, r0
 8001406:	460c      	mov	r4, r1
 8001408:	b913      	cbnz	r3, 8001410 <_fflush_r+0x10>
 800140a:	2500      	movs	r5, #0
 800140c:	4628      	mov	r0, r5
 800140e:	bd38      	pop	{r3, r4, r5, pc}
 8001410:	b118      	cbz	r0, 800141a <_fflush_r+0x1a>
 8001412:	6a03      	ldr	r3, [r0, #32]
 8001414:	b90b      	cbnz	r3, 800141a <_fflush_r+0x1a>
 8001416:	f7ff fc91 	bl	8000d3c <__sinit>
 800141a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0f3      	beq.n	800140a <_fflush_r+0xa>
 8001422:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001424:	07d0      	lsls	r0, r2, #31
 8001426:	d404      	bmi.n	8001432 <_fflush_r+0x32>
 8001428:	0599      	lsls	r1, r3, #22
 800142a:	d402      	bmi.n	8001432 <_fflush_r+0x32>
 800142c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800142e:	f7ff fe67 	bl	8001100 <__retarget_lock_acquire_recursive>
 8001432:	4628      	mov	r0, r5
 8001434:	4621      	mov	r1, r4
 8001436:	f7ff ff5d 	bl	80012f4 <__sflush_r>
 800143a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800143c:	07da      	lsls	r2, r3, #31
 800143e:	4605      	mov	r5, r0
 8001440:	d4e4      	bmi.n	800140c <_fflush_r+0xc>
 8001442:	89a3      	ldrh	r3, [r4, #12]
 8001444:	059b      	lsls	r3, r3, #22
 8001446:	d4e1      	bmi.n	800140c <_fflush_r+0xc>
 8001448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800144a:	f7ff fe5a 	bl	8001102 <__retarget_lock_release_recursive>
 800144e:	e7dd      	b.n	800140c <_fflush_r+0xc>

08001450 <__swhatbuf_r>:
 8001450:	b570      	push	{r4, r5, r6, lr}
 8001452:	460c      	mov	r4, r1
 8001454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001458:	2900      	cmp	r1, #0
 800145a:	b096      	sub	sp, #88	; 0x58
 800145c:	4615      	mov	r5, r2
 800145e:	461e      	mov	r6, r3
 8001460:	da0d      	bge.n	800147e <__swhatbuf_r+0x2e>
 8001462:	89a3      	ldrh	r3, [r4, #12]
 8001464:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001468:	f04f 0100 	mov.w	r1, #0
 800146c:	bf0c      	ite	eq
 800146e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001472:	2340      	movne	r3, #64	; 0x40
 8001474:	2000      	movs	r0, #0
 8001476:	6031      	str	r1, [r6, #0]
 8001478:	602b      	str	r3, [r5, #0]
 800147a:	b016      	add	sp, #88	; 0x58
 800147c:	bd70      	pop	{r4, r5, r6, pc}
 800147e:	466a      	mov	r2, sp
 8001480:	f000 f848 	bl	8001514 <_fstat_r>
 8001484:	2800      	cmp	r0, #0
 8001486:	dbec      	blt.n	8001462 <__swhatbuf_r+0x12>
 8001488:	9901      	ldr	r1, [sp, #4]
 800148a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800148e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001492:	4259      	negs	r1, r3
 8001494:	4159      	adcs	r1, r3
 8001496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800149a:	e7eb      	b.n	8001474 <__swhatbuf_r+0x24>

0800149c <__smakebuf_r>:
 800149c:	898b      	ldrh	r3, [r1, #12]
 800149e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80014a0:	079d      	lsls	r5, r3, #30
 80014a2:	4606      	mov	r6, r0
 80014a4:	460c      	mov	r4, r1
 80014a6:	d507      	bpl.n	80014b8 <__smakebuf_r+0x1c>
 80014a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80014ac:	6023      	str	r3, [r4, #0]
 80014ae:	6123      	str	r3, [r4, #16]
 80014b0:	2301      	movs	r3, #1
 80014b2:	6163      	str	r3, [r4, #20]
 80014b4:	b002      	add	sp, #8
 80014b6:	bd70      	pop	{r4, r5, r6, pc}
 80014b8:	ab01      	add	r3, sp, #4
 80014ba:	466a      	mov	r2, sp
 80014bc:	f7ff ffc8 	bl	8001450 <__swhatbuf_r>
 80014c0:	9900      	ldr	r1, [sp, #0]
 80014c2:	4605      	mov	r5, r0
 80014c4:	4630      	mov	r0, r6
 80014c6:	f7ff fe89 	bl	80011dc <_malloc_r>
 80014ca:	b948      	cbnz	r0, 80014e0 <__smakebuf_r+0x44>
 80014cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014d0:	059a      	lsls	r2, r3, #22
 80014d2:	d4ef      	bmi.n	80014b4 <__smakebuf_r+0x18>
 80014d4:	f023 0303 	bic.w	r3, r3, #3
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	81a3      	strh	r3, [r4, #12]
 80014de:	e7e3      	b.n	80014a8 <__smakebuf_r+0xc>
 80014e0:	89a3      	ldrh	r3, [r4, #12]
 80014e2:	6020      	str	r0, [r4, #0]
 80014e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014e8:	81a3      	strh	r3, [r4, #12]
 80014ea:	9b00      	ldr	r3, [sp, #0]
 80014ec:	6163      	str	r3, [r4, #20]
 80014ee:	9b01      	ldr	r3, [sp, #4]
 80014f0:	6120      	str	r0, [r4, #16]
 80014f2:	b15b      	cbz	r3, 800150c <__smakebuf_r+0x70>
 80014f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014f8:	4630      	mov	r0, r6
 80014fa:	f000 f81d 	bl	8001538 <_isatty_r>
 80014fe:	b128      	cbz	r0, 800150c <__smakebuf_r+0x70>
 8001500:	89a3      	ldrh	r3, [r4, #12]
 8001502:	f023 0303 	bic.w	r3, r3, #3
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	81a3      	strh	r3, [r4, #12]
 800150c:	89a3      	ldrh	r3, [r4, #12]
 800150e:	431d      	orrs	r5, r3
 8001510:	81a5      	strh	r5, [r4, #12]
 8001512:	e7cf      	b.n	80014b4 <__smakebuf_r+0x18>

08001514 <_fstat_r>:
 8001514:	b538      	push	{r3, r4, r5, lr}
 8001516:	4d07      	ldr	r5, [pc, #28]	; (8001534 <_fstat_r+0x20>)
 8001518:	2300      	movs	r3, #0
 800151a:	4604      	mov	r4, r0
 800151c:	4608      	mov	r0, r1
 800151e:	4611      	mov	r1, r2
 8001520:	602b      	str	r3, [r5, #0]
 8001522:	f7ff fa0e 	bl	8000942 <_fstat>
 8001526:	1c43      	adds	r3, r0, #1
 8001528:	d102      	bne.n	8001530 <_fstat_r+0x1c>
 800152a:	682b      	ldr	r3, [r5, #0]
 800152c:	b103      	cbz	r3, 8001530 <_fstat_r+0x1c>
 800152e:	6023      	str	r3, [r4, #0]
 8001530:	bd38      	pop	{r3, r4, r5, pc}
 8001532:	bf00      	nop
 8001534:	2000027c 	.word	0x2000027c

08001538 <_isatty_r>:
 8001538:	b538      	push	{r3, r4, r5, lr}
 800153a:	4d06      	ldr	r5, [pc, #24]	; (8001554 <_isatty_r+0x1c>)
 800153c:	2300      	movs	r3, #0
 800153e:	4604      	mov	r4, r0
 8001540:	4608      	mov	r0, r1
 8001542:	602b      	str	r3, [r5, #0]
 8001544:	f7ff fb64 	bl	8000c10 <_isatty>
 8001548:	1c43      	adds	r3, r0, #1
 800154a:	d102      	bne.n	8001552 <_isatty_r+0x1a>
 800154c:	682b      	ldr	r3, [r5, #0]
 800154e:	b103      	cbz	r3, 8001552 <_isatty_r+0x1a>
 8001550:	6023      	str	r3, [r4, #0]
 8001552:	bd38      	pop	{r3, r4, r5, pc}
 8001554:	2000027c 	.word	0x2000027c

08001558 <_sbrk_r>:
 8001558:	b538      	push	{r3, r4, r5, lr}
 800155a:	4d06      	ldr	r5, [pc, #24]	; (8001574 <_sbrk_r+0x1c>)
 800155c:	2300      	movs	r3, #0
 800155e:	4604      	mov	r4, r0
 8001560:	4608      	mov	r0, r1
 8001562:	602b      	str	r3, [r5, #0]
 8001564:	f7ff f9a8 	bl	80008b8 <_sbrk>
 8001568:	1c43      	adds	r3, r0, #1
 800156a:	d102      	bne.n	8001572 <_sbrk_r+0x1a>
 800156c:	682b      	ldr	r3, [r5, #0]
 800156e:	b103      	cbz	r3, 8001572 <_sbrk_r+0x1a>
 8001570:	6023      	str	r3, [r4, #0]
 8001572:	bd38      	pop	{r3, r4, r5, pc}
 8001574:	2000027c 	.word	0x2000027c

08001578 <_init>:
 8001578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800157a:	bf00      	nop
 800157c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800157e:	bc08      	pop	{r3}
 8001580:	469e      	mov	lr, r3
 8001582:	4770      	bx	lr

08001584 <_fini>:
 8001584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001586:	bf00      	nop
 8001588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800158a:	bc08      	pop	{r3}
 800158c:	469e      	mov	lr, r3
 800158e:	4770      	bx	lr
